<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>PROMs Scores</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <style>
    body {
      font-family: Verdana, sans-serif;
    }
    .line {
      fill: none;
      stroke: #8a8a8a;
      stroke-width: 2.5px;
    }
    .axis-label {
      font-size: 11px;
      font-family: Verdana, sans-serif;
    }
    .annotation {
      font-size: 12px;
      font-family: Verdana, sans-serif;
    }
    .highlight-circle {
      stroke: #4682b4;
      stroke-width: 2.5px;
    }
    .data-circle {
      fill: #ffffff;
      stroke:  #8a8a8a;
      stroke-width: 2.5px;
    }
    .grid-line {
      stroke: #ddd;
      stroke-width: 1px;
    }
  </style>
</head>
<body>

<script>
  // Load and process data
  function loadData(csvPath, callback) {
    d3.csv(csvPath).then(data => {
      data.forEach(d => {
        d.months = +d.months_since_initial;
        d.score = +d.scores;
        d.ymax = +d.ymax;
        d.ymin = +d.ymin;
      });
      callback(data);
    });
  }

  // Load and process severity levels
  function loadSeverityLevels(csvPath, scale, callback) {
    d3.csv(csvPath).then(data => {
      const severityLevels = data
        .filter(d => d.Scale === scale)
        .map(d => ({
          level: d.Severity,
          color: d.Color,
          range: [+d.Chart_Range_Min, +d.Chart_Range_Max]
        }));
      callback(severityLevels);
    });
  }

  // Create scales
  function createScales(data, width, height) {
    const x = d3.scaleLinear()
      .domain([d3.min(data, d => d.months), d3.max(data, d => d.months)])
      .range([0, width]);

    const y = d3.scaleLinear()
      .domain([+data[0].ymin, +data[0].ymax])
      .range([height, 0]);

    return { x, y };
  }

  // Draw axes
  function drawAxes(svg, x, y, width, height) {
    svg.append("g")
      .attr("transform", `translate(0,${height})`)
      .call(d3.axisBottom(x))
      .selectAll("text")
      .style("fill", "#777");

    svg.append("g")
      .call(d3.axisLeft(y))
      .selectAll("text")
      .style("fill", "#777");
  }

  // Draw grid lines for severity levels
  function drawSeverityGridLines(svg, y, width, severityLevels) {
    severityLevels.forEach(severity => {
      svg.append("line")
        .attr("class", "grid-line")
        .attr("x1", 0)
        .attr("x2", width)
        .attr("y1", y(severity.range[0]))
        .attr("y2", y(severity.range[0]));

      svg.append("line")
        .attr("class", "grid-line")
        .attr("x1", 0)
        .attr("x2", width)
        .attr("y1", y(severity.range[1]))
        .attr("y2", y(severity.range[1]));
    });
  }

  // Draw severity labels
  function drawSeverityLabels(svg, y, width, margin, severityLevels) {
    severityLevels.forEach(severity => {
      svg.append("rect")
        .attr("x", width + margin.right - 100)
        .attr("y", y(severity.range[1]))
        .attr("width", 6)
        .attr("height", y(severity.range[0]) - y(severity.range[1]))
        .attr("fill", severity.color);

      svg.append("text")
        .attr("x", width + margin.right - 85)
        .attr("y", (y(severity.range[0]) + y(severity.range[1])) / 2)
        .attr("dy", ".35em")
        .attr("text-anchor", "start")
        .attr("class", "axis-label")
        .text(severity.level);
    });
  }

  // Draw line and data points
  function drawLineAndPoints(svg, data, x, y, line, highlightColor) {
    svg.append("path")
      .datum(data)
      .attr("class", "line")
      .attr("d", line);

    data.slice(0, -1).forEach(d => {
      svg.append("circle")
        .attr("class", "data-circle")
        .attr("cx", x(d.months))
        .attr("cy", y(d.score))
        .attr("r", 4);
    });

    const lastDataPoint = data[data.length - 1];

    svg.append("circle")
      .attr("class", "highlight-circle")
      .attr("cx", x(lastDataPoint.months))
      .attr("cy", y(lastDataPoint.score))
      .attr("r", 8)
      .attr("fill", highlightColor);

    svg.append("text")
      .attr("class", "annotation")
      .attr("x", x(lastDataPoint.months) + 10)
      .attr("y", y(lastDataPoint.score))
      .text(lastDataPoint.score);
  }

  // Draw annotations
  function drawAnnotations(svg, data, margin, width, height) {
    const changeSinceBaseline = Math.round((data[data.length - 1].score - data[0].score) * 100) / 100;
    const changeSinceLast = Math.round((data[data.length - 1].score - data[data.length - 2].score) * 100) / 100;

    svg.append("text")
      .attr("class", "annotation")
      .attr("x", margin.left / 2)
      .attr("y", -margin.top / 2.5)
      .text(changeSinceBaseline > 0 ? `↑ ${changeSinceBaseline} since baseline` : `↓ ${changeSinceBaseline} since baseline`)
      .style("fill", changeSinceBaseline > 0 ? "green" : "red");

    svg.append("text")
      .attr("class", "annotation")
      .attr("x", margin.left / 2)
      .attr("y", -margin.top / 2 + 25)
      .text(changeSinceLast < 0 ? `↓ ${changeSinceLast} since last` : `↑ ${changeSinceLast} since last`)
      .style("fill", changeSinceLast < 0 ? "red" : "green");
  }

  // Draw chart title and labels
  function drawTitleAndLabels(svg, title, margin, width, height) {
    const xAxisLabel = "Months Since Baseline";

    svg.append("text")
      .attr("class", "annotation")
      .attr("x", width / 2)
      .attr("y", height + margin.bottom - 10)
      .attr("text-anchor", "middle")
      .text(xAxisLabel);

    svg.append("text")
      .attr("class", "annotation")
      .attr("x", width / 2)
      .attr("y", -margin.top + 30)
      .attr("text-anchor", "middle")
      .style("font-size", "18px")
      .text(title);
  }

  // Main function to draw the chart
  function drawChart(data, severityCsvPath, traceName, title) {
    const margin = { top: 80, right: 150, bottom: 50, left: 50 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select("body")
      .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);

    const filteredData = data.filter(d => d.trace_name === traceName);
    loadSeverityLevels(severityCsvPath, traceName, severityLevels => {
      const { x, y } = createScales(filteredData, width, height);
      const line = d3.line()
        .x(d => x(d.months))
        .y(d => y(d.score))
        .curve(d3.curveCardinal);

      const lastDataPoint = filteredData[filteredData.length - 1];
      let highlightColor = "#4682b4";
      severityLevels.forEach(severity => {
        if (lastDataPoint.score >= severity.range[0] && lastDataPoint.score <= severity.range[1]) {
          highlightColor = severity.color;
        }
      });

      drawAxes(svg, x, y, width, height);
      drawSeverityGridLines(svg, y, width, severityLevels);
      drawSeverityLabels(svg, y, width, margin, severityLevels);
      drawLineAndPoints(svg, filteredData, x, y, line, highlightColor);
      drawAnnotations(svg, filteredData, margin, width, height);
      drawTitleAndLabels(svg, title, margin, width, height);
    });
  }

  // Load data and generate charts
  loadData("<%= csvPath %>", data => {
    const uniqueTraceNames = [...new Set(data.map(d => d.trace_name))];
    uniqueTraceNames.forEach(traceName => {
      const title = data.find(d => d.trace_name === traceName).title || traceName;
      drawChart(data, "SeverityLevels.csv", traceName, title);
    });
  });

</script>

</body>
</html>











<!--userDetails.ejs code-->


<div class="speciality-container">
  <p class="speciality-title">Global Health Surveys</p>
  <div class="image-container">
      <div class="chart-container">
          <p class="title">Global Health for Physical Health (PROMIS-10)</p>
          <div class="image" onclick="openModal('new_folder/plot_physical_health_<%= user.Mr_no %>.jpg', 'physical', '<%= user.Mr_no %>')">
              <img src="new_folder/plot_physical_health_<%= user.Mr_no %>.jpg" alt="Physical Health Graph">
          </div>
          <iframe id="iframe-physical" src="/chart?type=physical&mr_no=<%= user.Mr_no %>" class="chart-iframe"></iframe>
      </div>
      <div class="chart-container">
          <p class="title">Global Health for Mental Health (PROMIS-10)</p>
          <div class="image" onclick="openModal('new_folder/plot_mental_health_<%= user.Mr_no %>.jpg', 'mental', '<%= user.Mr_no %>')">
              <img src="new_folder/plot_mental_health_<%= user.Mr_no %>.jpg" alt="Mental Health Graph">
          </div>
          <iframe id="iframe-mental" src="/chart?type=mental&mr_no=<%= user.Mr_no %>" class="chart-iframe"></iframe>
      </div>
  </div>
</div>













<div class="speciality-container">
  <p class="speciality-title">Global Health Surveys</p>
  <div class="image-container">
      <div class="chart-container">
          <p class="title">Global Health for Physical Health (PROMIS-10)</p>
          <div class="image" onclick="openModal('new_folder/plot_physical_health_<%= user.Mr_no %>.jpg', 'physical', '<%= user.Mr_no %>')">
              <img src="new_folder/plot_physical_health_<%= user.Mr_no %>.jpg" alt="Physical Health Graph">
          </div>
          <iframe id="iframe-physical" src="/chart?mr_no=<%= user.Mr_no %>&type=physical" class="chart-iframe"></iframe>
      </div>
      <div class="chart-container">
          <p class="title">Global Health for Mental Health (PROMIS-10)</p>
          <div class="image" onclick="openModal('new_folder/plot_mental_health_<%= user.Mr_no %>.jpg', 'mental', '<%= user.Mr_no %>')">
              <img src="new_folder/plot_mental_health_<%= user.Mr_no %>.jpg" alt="Mental Health Graph">
          </div>
          <!-- <iframe id="iframe-mental" src="/chart?mr_no=<%= user.Mr_no %>&type=mental" class="chart-iframe"></iframe> -->
      </div>
  </div>
</div>




<!--this the code from userDetail.ejs for details of the patient-->

<div class="user-details-container">

  <div><h2>Your Details</h2></div>
  <div class="row">
      <div class="column">
          <p><strong>MR_No:</strong> <%= user.Mr_no %></p>
          <p><strong>Name:</strong> <%= user.Name %></p>
          <p><strong>Date Of Birth:</strong> <%= user.DOB %></p>
          <p><strong>Date & Time:</strong> <%= user.datetime %></p>
          <p><strong>Speciality:</strong> <%= user.speciality %></p>
      </div>

      <div class="column">
          <p><strong>Date Of Surgery:</strong> <%= user.dateOfSurgery %></p>
          <p><strong>Phone Number:</strong> <%= user.phoneNumber %></p>
      </div>
  </div>
  <hr>
  <% if (user.specialities && user.specialities.length > 0) { %>
      <% user.specialities.forEach(function(speciality) { %>
          <!-- <div class="speciality-container">
              <p class="speciality-title"><%= speciality.name %></p>
              <div class="image-container">
                  <% if (speciality.name === 'Diabetes') { %>
                      <div>
                          <p class="title">Assessment for Diabetes Care (PAID)</p>
                          <div class="image" onclick="openModal('new_folder/plot_PAID_<%= user.Mr_no %>.jpg')">
                              <img src="new_folder/plot_PAID_<%= user.Mr_no %>.jpg" alt="Image for PAID">
                          </div>
                      </div>
                  <% } else if (speciality.name === 'Pregnancy and Childbirth') { %>
                      <div>
                          <p class="title">Assessment of urinary incontinence (ICIQ-UI SF)</p>
                          <div class="image" onclick="openModal('new_folder/plot_ICIQ-UI_SF_<%= user.Mr_no %>.jpg')">
                              <img src="new_folder/plot_ICIQ-UI_SF_<%= user.Mr_no %>.jpg" alt="Image for ICIQ-UI SF">
                          </div>
                      </div>
                      <div>
                          <p class="title">Assessment of incontinence to stools (Wexner)</p>
                          <div class="image" onclick="openModal('new_folder/plot_Wexner_<%= user.Mr_no %>.jpg')">
                              <img src="new_folder/plot_Wexner_<%= user.Mr_no %>.jpg" alt="Image for Wexner">
                          </div>
                      </div>
                      <div>
                          <p class="title">Mental Health Resilience post pregnancy (EPDS)</p>
                          <div class="image" onclick="openModal('new_folder/plot_EPDS_<%= user.Mr_no %>.jpg')">
                              <img src="new_folder/plot_EPDS_<%= user.Mr_no %>.jpg" alt="Image for EPDS">
                          </div>
                      </div>
                  <% } %>
              </div>
          </div> -->
      <% }); %>
  <% } else { %>
      <p><strong>No surveys available for this speciality.</strong></p>
  <% } %>

  <!-- Add this section for PROMIS-10 graphs -->
  <!-- <div class="speciality-container">
      <p class="speciality-title">Global Health Surveys</p>
      <div class="image-container">
          <div>
              <p class="title">Global Health for Physical Health (PROMIS-10)</p>
              <div class="image" onclick="openModal('new_folder/plot_physical_health_<%= user.Mr_no %>.jpg')">
                  <img src="new_folder/plot_physical_health_<%= user.Mr_no %>.jpg" alt="Physical Health Graph">
              </div>
          </div>
          <div>
              <p class="title">Global Health for Mental Health (PROMIS-10)</p>
              <div class="image" onclick="openModal('new_folder/plot_mental_health_<%= user.Mr_no %>.jpg')">
                  <img src="new_folder/plot_mental_health_<%= user.Mr_no %>.jpg" alt="Mental Health Graph">
              </div>
          </div>
      </div>
  </div> -->


  <!-- Add this section for PROMIS-10 graphs -->

  <!-- Add this section for PROMIS-10 graphs -->
<!-- Add this section for PROMIS-10 graphs -->

<!-- Add this section for PROMIS-10 graphs -->



<!-- Updated section in userDetails.ejs -->

<div class="speciality-container">
  <p class="speciality-title">Patient Visualization</p>
  <div class="image-container">
      <div class="chart-container">
          <!-- <p class="title">Global Health for Physical Health (PROMIS-10)</p> -->
          <!-- <div class="image" onclick="openModal('new_folder/plot_physical_health_<%= user.Mr_no %>.jpg', 'physical', '<%= user.Mr_no %>')"> -->
              <!-- <img src="new_folder/plot_physical_health_<%= user.Mr_no %>.jpg" alt="Physical Health Graph"> -->
          </div>
          <iframe id="iframe-physical" src="/chart?mr_no=<%= user.Mr_no %>" class="chart-iframe"></iframe>
      </div>
  </div>
</div>
