# -*- coding: utf-8 -*-
"""Data_Analysis_folder_generation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hVuAY0NSnnY-9a4lWBOZQIWnff4QfNus
"""

import pandas as pd

def read_csv_file_as_dataframe(file_path):
    df = pd.read_csv(file_path)
    return df

# Replace 'patients.csv' with the actual file path
file_path = 'patient.csv'
patients_df = read_csv_file_as_dataframe(file_path)

# Display the DataFrame
# print(patients_df.head())

#This code is all generation for all the patient at once based on the specific Graph type

import os
import matplotlib.pyplot as plt

def plot_patient_progress(df):
    num_patients = len(df)
    # Create a new folder to store the plots
    output_folder = 'patient_progress_plots'
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for i in range(num_patients):
        patient_data = df.iloc[i]
        patient_name = patient_data['Patient Name']
        scores = [patient_data[f'Score{j}'] for j in range(1, 11)]
        dates = [patient_data[f'Date{j}'] for j in range(1, 11)]

        plt.figure(figsize=(10, 5))
        plt.scatter(dates, scores, marker='o', label=patient_name)
        plt.plot(dates, scores, linestyle='-', marker='o')
        plt.title(f'Progress Scores for {patient_name}')
        plt.xlabel('Date')
        plt.ylabel('Score')
        plt.xticks(rotation=45)
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        # Save the plot as a file in the new folder
        plt.savefig(os.path.join(output_folder, f'{patient_name}_progress_plot.png'))
        plt.close()  # Close the plot to avoid displaying it

# Example usage:
# Replace 'patients_df' with your DataFrame containing the patient data
# plot_patient_progress(patients_df)

import matplotlib.pyplot as plt
import numpy as np
import os

def calculate_mean_score(scores):
    return np.mean(scores)

def plot_patient_gradient_plot(df, mr_number):
    num_patients = len(df)
    for i in range(num_patients):
        patient_data = df.iloc[i]
        patient_name = patient_data['Patient Name']
        patient_mr_number = patient_data['MR Number']

        # Check if the patient's MR number matches the specified value
        if patient_mr_number == mr_number:
            scores = [patient_data[f'Score{j}'] for j in range(1, 11)]
            dates = [patient_data[f'Date{j}'] for j in range(1, 11)]

            mean_score = calculate_mean_score(scores)

            # Create a gradient plot
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.plot(dates, scores, marker='o', color='blue', alpha=0.5)
            ax.fill_between(dates, scores, color='blue', alpha=0.1)
            ax.set_title(f'Gradient Plot for {patient_name} (Mean Score: {mean_score:.2f})')
            ax.set_xlabel('Date')
            ax.set_ylabel('Score')
            ax.grid(True)
            plt.xticks(rotation=45)
            plt.tight_layout()

            # Save the plot
            output_folder = 'patient_plots'
            if not os.path.exists(output_folder):
                os.makedirs(output_folder)
            plt.savefig(os.path.join(output_folder, f'{patient_name}_gradient_plot.png'))
            plt.close()

# Example usage:
# Replace 'patients_df' with your DataFrame containing the patient data
# Replace 'mr_number' with the specified MR number
# plot_patient_gradient_plot(patients_df, 4415824693)

import matplotlib.pyplot as plt
import os

def calculate_progress_score(scores):
    return scores[-1] - scores[0]

def plot_patient_progress(df, mr_number):
    num_patients = len(df)
    for i in range(num_patients):
        patient_data = df.iloc[i]
        patient_name = patient_data['Patient Name']
        patient_mr_number = patient_data['MR Number']

        # Check if the patient's MR number matches the specified value
        if patient_mr_number == mr_number:
            scores = [patient_data[f'Score{j}'] for j in range(1, 11)]
            dates = [patient_data[f'Date{j}'] for j in range(1, 11)]

            progress_score = calculate_progress_score(scores)

            plt.figure(figsize=(10, 5))
            plt.scatter(dates, scores, marker='o', label=patient_name)
            plt.plot(dates, scores, linestyle='-', marker='o')
            plt.title(f'Progress Scores for {patient_name} (Progress Score: {progress_score})')
            plt.xlabel('Date')
            plt.ylabel('Score')
            plt.xticks(rotation=45)
            plt.legend()
            plt.grid(True)
            plt.tight_layout()

            # Save the plot
            output_folder = 'patient_plots'
            if not os.path.exists(output_folder):
                os.makedirs(output_folder)
            plt.savefig(os.path.join(output_folder, f'{patient_name}_progress_plot.png'))
            plt.close()

# Example usage:
# Replace 'patients_df' with your DataFrame containing the patient data
# Replace 'mr_number' with the specified MR number
# plot_patient_progress(patients_df, 4415824693)

import matplotlib.pyplot as plt
import numpy as np
import os

def plot_patient_bullet_chart(df, mr_number):
    num_patients = len(df)
    for i in range(num_patients):
        patient_data = df.iloc[i]
        patient_name = patient_data['Patient Name']
        patient_mr_number = patient_data['MR Number']

        # Check if the patient's MR number matches the specified value
        if patient_mr_number == mr_number:
            scores = [patient_data[f'Score{j}'] for j in range(1, 11)]
            dates = [patient_data[f'Date{j}'] for j in range(1, 11)]

            # Define benchmarks for comparison
            target_scores = [90, 80, 70, 60, 50, 40, 30, 20, 10, 0]  # Example target scores

            # Plot bullet chart
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.plot(dates, scores, marker='o', color='black')
            ax.set_title(f'Bullet Chart for {patient_name}')
            ax.set_xlabel('Date')
            ax.set_ylabel('Score')

            # Plot target scores as horizontal lines
            for i, target_score in enumerate(target_scores):
                ax.axhline(y=target_score, color='lightgray', linestyle='--', linewidth=1)

            # Highlight progress score
            ax.scatter(dates[-1], scores[-1], color='blue', label='Progress Score')

            # Add legend and grid
            ax.legend()
            ax.grid(True)
            plt.xticks(rotation=45)
            plt.tight_layout()

            # Save the plot
            output_folder = 'patient_plots'
            if not os.path.exists(output_folder):
                os.makedirs(output_folder)
            plt.savefig(os.path.join(output_folder, f'{patient_name}_bullet_chart.png'))
            plt.close()

# Example usage:
# Replace 'patients_df' with your DataFrame containing the patient data
# Replace 'mr_number' with the specified MR number
# plot_patient_bullet_chart(patients_df, 4415824693)

import matplotlib.pyplot as plt
import numpy as np
import os

def plot_patient_radar_chart(df, mr_number):
    num_patients = len(df)
    for i in range(num_patients):
        patient_data = df.iloc[i]
        patient_name = patient_data['Patient Name']
        patient_mr_number = patient_data['MR Number']

        # Check if the patient's MR number matches the specified value
        if patient_mr_number == mr_number:
            scores = [patient_data[f'Score{j}'] for j in range(1, 11)]
            dates = [patient_data[f'Date{j}'] for j in range(1, 11)]

            # Define variables for radar chart
            labels = [f'Score {j}' for j in range(1, 11)]
            angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
            scores += scores[:1]
            angles += angles[:1]

            # Plot radar chart
            fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))
            ax.fill(angles, scores, color='skyblue', alpha=0.4)
            ax.plot(angles, scores, color='blue', linewidth=2)
            ax.set_title(f'Radar Chart for {patient_name}', size=20, color='blue', y=1.1)
            ax.set_yticklabels([])
            ax.set_xticks(angles[:-1])
            ax.set_xticklabels(labels, size=12)
            ax.yaxis.grid(True)
            ax.legend(['Progress Scores'], loc=(0.9, 0.95), fontsize='large')
            plt.tight_layout()

            # Save the plot
            output_folder = 'patient_plots'
            if not os.path.exists(output_folder):
                os.makedirs(output_folder)
            plt.savefig(os.path.join(output_folder, f'{patient_name}_radar_chart.png'))
            plt.close()

# Example usage:
# Replace 'patients_df' with your DataFrame containing the patient data
# Replace 'mr_number' with the specified MR number
# plot_patient_radar_chart(patients_df, 4415824693)

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import os

def plot_patient_3d_graph(df, mr_number):
    num_patients = len(df)
    for i in range(num_patients):
        patient_data = df.iloc[i]
        patient_name = patient_data['Patient Name']
        patient_mr_number = patient_data['MR Number']

        # Check if the patient's MR number matches the specified value
        if patient_mr_number == mr_number:
            scores = [patient_data[f'Score{j}'] for j in range(1, 11)]
            dates = [patient_data[f'Date{j}'] for j in range(1, 11)]

            # Create a 3D plot
            fig = plt.figure(figsize=(10, 6))
            ax = fig.add_subplot(111, projection='3d')

            # Plot progress scores over time
            x = np.arange(1, 11)
            y = np.arange(1, 11)
            x, y = np.meshgrid(x, y)
            z = np.array([scores]*10)

            ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')
            ax.set_title(f'3D Graph for {patient_name}')
            ax.set_xlabel('Date')
            ax.set_ylabel('Score')
            ax.set_zlabel('Progress')

            plt.tight_layout()

            # Save the plot
            output_folder = 'patient_plots'
            if not os.path.exists(output_folder):
                os.makedirs(output_folder)
            plt.savefig(os.path.join(output_folder, f'{patient_name}_3d_graph.png'))
            plt.close()

# Example usage:
# Replace 'patients_df' with your DataFrame containing the patient data
# Replace 'mr_number' with the specified MR number
# plot_patient_3d_graph(patients_df, 4415824693)

import matplotlib.pyplot as plt
import os

def plot_patient_progress_area(df, mr_number):
    num_patients = len(df)
    for i in range(num_patients):
        patient_data = df.iloc[i]
        patient_name = patient_data['Patient Name']
        patient_mr_number = patient_data['MR Number']

        # Check if the patient's MR number matches the specified value
        if patient_mr_number == mr_number:
            scores = [patient_data[f'Score{j}'] for j in range(1, 11)]
            dates = [patient_data[f'Date{j}'] for j in range(1, 11)]

            plt.figure(figsize=(10, 5))
            plt.fill_between(dates, scores, color='skyblue', alpha=0.4)
            plt.plot(dates, scores, marker='o', color='blue')
            plt.title(f'Progress Scores for {patient_name}')
            plt.xlabel('Date')
            plt.ylabel('Score')
            plt.xticks(rotation=45)
            plt.grid(True)
            plt.tight_layout()

            # Save the plot
            output_folder = 'patient_plots'
            if not os.path.exists(output_folder):
                os.makedirs(output_folder)
            plt.savefig(os.path.join(output_folder, f'{patient_name}_progress_area_chart.png'))
            plt.close()

# Example usage:
# Replace 'patients_df' with your DataFrame containing the patient data
# Replace 'mr_number' with the specified MR number
# plot_patient_progress_area(patients_df, 4415824693)

import pandas as pd
import matplotlib.pyplot as plt

def generate_patient_plots(df, mr_number):
    plot_functions = [
        plot_patient_progress,
        plot_patient_progress_area,
        plot_patient_bullet_chart,
        plot_patient_radar_chart,
        plot_patient_3d_graph,
        plot_patient_gradient_plot
    ]

    for plot_function in plot_functions:
        plot_function(df, mr_number)

# Example usage:
# Replace 'patients_df' with your DataFrame containing the patient data
# Replace '4415824693' with the MR number of the patient you want to generate plots for
# generate_patient_plots(patients_df,4415824693)

