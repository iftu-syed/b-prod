<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Details</title>
    <link rel="stylesheet" href="<%= basePath %>/patientdetails.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <script src="https://d3js.org/d3.v7.min.js"></script>

<style>

.log-note {
    white-space: normal; /* Prevent text wrapping */
    overflow: auto;    /* Hide the overflowing text */
    text-overflow: ellipsis; /* Show ellipsis (...) when text overflows */
}


.ai-message-box {
    background-color: #f0f8ff; /* Light blue background */
    border: 2px solid #4682b4; /* Blue border */
    border-radius: 10px; /* Rounded corners */
    padding: 15px; /* Padding inside the box */
    margin-bottom: 20px; /* Space below the box */
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
    max-width: 300px; /* Maximum width */
    position: absolute; /* Positioned absolute to place it on the right */
    right: 20px; /* Distance from the right side of the container */
    top: 20px; /* Distance from the top of the container */
    z-index: 100; /* Ensure it appears above other elements */
}

.ai-message-box h3 {
    font-size: 18px; /* Slightly larger font size for the title */
    color: #333; /* Darker color for the title */
    margin-bottom: 10px; /* Space below the title */
    text-align: center; /* Center the title */
}

.ai-message-box p {
    font-size: 14px; /* Font size for the content */
    color: #555; /* Darker gray for the content text */
    line-height: 1.5; /* Line height for better readability */
    text-align: center; /* Center the text */
}

          .chart {
      margin: 20px; /* Add margin around each chart */
    }
    .line {
        fill: none;
        stroke: #8a8a8a;
        stroke-width: 2.5px;
    }
    .axis-label, .annotation {
        font-family: 'Roboto', sans-serif;
        font-size: 12px;
    }
    .highlight-circle {
        stroke: #4682b4;
        stroke-width: 2.5px;
    }
    .data-circle {
        fill: #ffffff;
        stroke: #8a8a8a;
        stroke-width: 2.5px;
    }
/* BREATHING EFFECT TO CIRCLES */
@keyframes breathing {
    0% {
        transform: scale(1);
        opacity: 1;
    }
    50% {
        transform: scale(1.2);
        opacity: 0.7;
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}

.highlight-circle {
    transform-box: fill-box;
    transform-origin: center;
    animation: breathing 2s infinite ease-in-out;
}

/* TABS */



.chart-container {
    width: 100%;
    overflow: auto;
    flex-grow: 1;
}

/* Loading GIF */
.loading-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    display: none; /* Initially hide the loading container */
}

.loading-container img {
    width: 70%;  /* Adjust the width to make the GIF smaller */
    height: 70%; /* Adjust the height to make the GIF smaller */
}
@media (max-width:600px) {
.loading-container img {width: 100%!important;

}
}
.sidebar .nav-item {
  display: none;
}

.sidebar.active .nav-item {
  opacity: 1;
  display: block;
}

/* END OF BREATHIGN EFFECT CSS */

    .grid-line {
        stroke: #ddd;
        stroke-width: 1px;
    }

    .image-container {
        display: flex;
        flex-wrap: wrap;
        /* justify-content: space-between; */
        justify-content: space-evenly;
    }
    .charts-grid {
        display: grid;
        grid-template-columns: 1fr; /* Single column by default */
        gap: 20px; /* Space between charts */
        justify-items: center;
    }

    @media (min-width: 600px) {
        .charts-grid {
            grid-template-columns: 1fr 1fr; /* Two columns for larger screens */
        }
    }


    .chart-container {
        background-color: white;
        width: 500px;
        /* border-radius: 10px; Add rounded corners */
        box-shadow: -5px 3px 20px 1px rgba(0, 0, 0, 0.1); /* Add shadow for depth */
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* Smooth hover transition */
        border-radius: 15px;
    }

    .chart-container:hover {
        transform: scale(1.01); /* Slightly enlarge the chart on hover */
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); /* Add shadow for depth */
    }
        .chart-iframe {
    width: 1300px;
    height: 100vh;
    border: none;
    overflow: hidden; 
}

    /* Loading GIF */
.loading-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    display: none; /* Initially hide the loading container */
}

.loading-container img {
    width: 70%;  /* Adjust the width to make the GIF smaller */
    height: 70%; /* Adjust the height to make the GIF smaller */
}


    .log-entry.doctor-note-entry {
        background-color: #f0f8ff; /* Light blue for doctor's notes */
        border-left: 5px solid blue; /* Blue strip for doctor's notes */
    }

    .log-entry.intervention-entry {
        background-color: #e6ffe6; /* Light green for interventions */
        border-left: 5px solid green; /* Green strip for interventions */
    }

    .log-entry.icd-code-entry {
        background-color: #fff5e6; /* Light orange for ICD codes */
        border-left: 5px solid orange; /* Orange strip for ICD codes */
    }


    .tooltip-chart {
    position: absolute;
    opacity: 0;
    pointer-events: none;
    background-color: lightsteelblue; /* Update to the color used in userDetails */
    color: black; /* Ensure the text color is readable */
    border-radius: 4px; /* Rounded corners */
    padding: 10px; /* Padding for tooltip */
    font-size: 14px; /* Font size */
    z-index: 10;
    transition: opacity 0.3s;
    /* Optional: Shadow for better visibility */
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
}




</style>


   
</head>

<body style="background-color: #fff;">
    <div class="sidebar">
        <div class="top">
             <div class="logo">
            <img src="<%= basePath %>/assets/logo.png" alt="WeHealthify">
             </div>
             <i class="bx bx-menu" id="btn"></i>
        </div>

        <div class="user">
            <div>
                <p class="bold"><%= doctor.username %></p>
                <p><%= doctor.speciality %></p>
            </div>
        </div>
        
        <ul>
            <li>
                <a href="<%= basePath %>/home">
                    <i class="bx bxs-grid-alt"></i>
                    <span class="nav-item">Dashboard</span>
                </a>
                <span class="tooltip">Dashboard</span>
            </li>
            <li>
                <a href="<%= basePath %>/survey-details/<%= patient.Mr_no %>" target="_blank">
                    <i class="bx bx-list-ul"></i>
                    <span class="nav-item">Survey Details</span>
                </a>
                <span class="tooltip">Survey Details</span>
            </li>
            <li>
                <a href="<%= basePath %>" class="logout-button">
                    <i class="bx bx-log-out"></i>
                    <span class="nav-item">Logout</span>
                </a>
                <span class="tooltip">Logout</span>
            </li>
        </ul>
    </div>

    <div class="main-content">
        <div class="column1">
        <div class="topbar">
            <h1>Welcome, Dr. <%= doctor.firstName %> <%=doctor.lastName %></h1>

            <form action="<%= basePath %>/search" method="GET" class="searchtopbar">
                <input type="text" name="mrNo" placeholder="Quick MR Search" >
                <button type="submit" class="btn-search"><i class='bx bx-search-alt'></i></button>
            </form>

        </div>
        <br><br>

            <div id="charts-container" class="charts-grid">
                <!-- Each chart will be appended here by D3 -->
            </div>

        </div>
        <div class="column2">
            <div class="ai-message">
                <h2>Summary</h2>
                <br>
                    <p>
                        <%-aiMessage
                          .replace(/<ol>/g, '<ul>')  // Replace ordered list opening tags with unordered list
                          .replace(/<\/ol>/g, '</ul>')  // Replace ordered list closing tags with unordered list
                          .replace(/<li>/g, '<li style="list-style-type: none;">')  // Remove default list styling for list items
                          .replace(/<ul>/g, '<ul style="padding-left: 0;">') // Ensure padding is removed from unordered list
                       %>
                      </p>
                      
            </div>
            
            
            
        <div class="tabs-container">
            <div class="tab" onclick="showTabContent('doctor-notes')">Notes</div>
            <div class="tab" onclick="showTabContent('intervention')">Intervention</div>
            <div class="tab" onclick="showTabContent('patient-info')">Info</div>


        </div>

        <div id="doctor-notes" class="tab-content">
            <h3>Add Notes:</h3><br>
            <div class="note-form">
                <form id="doctor-note-form" action="<%= basePath %>/addDoctorNote" method="POST" onsubmit="submitForm(event, 'doctor-note-form', 'note-doctor')">
                    <input type="hidden" name="Mr_no" value="<%= patient.Mr_no %>">
                    <div class="textarea-container">
                        <textarea id="doctor-note" name="doctorNote" placeholder="Enter doctor's note here" required></textarea><br><br>
                        <button type="submit"><i class='bx bx-plus'></i> Add</button>
                    </div>
                    <span class="success-message" id="note-doctor">Successfully added!</span>
                </form>
            </div>

        </div>
        <div class="tab-content-container">


            <div id="intervention" class="tab-content">
                <div class="inforow">

                    <div class="column">
                        <div class="form-container">
                            <div class="note-form">
                                <form id="note-form" action="<%= basePath %>/addNote" method="POST" onsubmit="submitForm(event, 'note-form', 'note-message')">
                                    <input type="hidden" name="Mr_no" value="<%= patient.Mr_no %>">
                                    <input type="text" id="note" name="event" placeholder="Enter your Intervention here" required><br><br>
                                    <input type="date" id="date" name="date" required>
                                    <br><br><button type="submit" class="add-button"><i class='bx bx-plus'></i> Add</button>
                                    <span class="success-message" id="note-message">Successfully added!</span>
                                </form>
                            </div><br>

                            <form id="code-form" action="<%= basePath %>/addCode" method="POST" onsubmit="submitForm(event, 'code-form', 'code-message')">
                                <input type="hidden" name="Mr_no" value="<%= patient.Mr_no %>">
                                <select id="code" name="code" required>
                                    <option value="" disabled selected>Select ICD code</option>
                                </select>
                                <input type="hidden" id="code_date" name="code_date" value="<%= new Date().toISOString().split('T')[0] %>">
                                <br><br><button type="submit" class="add-button"><i class='bx bx-plus'></i> Add</button>
                                <span class="success-message" id="code-message">Successfully added!</span>
                            </form> 



                        </div>
                    </div>
                </div>
            </div>
            <div id="patient-info" class="tab-content">
                <div class="inforow">
                    <div class="column">
                        <p><b>Name: </b><%= patient.firstName %> <%= patient.lastName %></p><br>
                        <p><b>MR No:</b> <%= patient.Mr_no %></p><br>
                        <p><b>Phone No: </b><%= patient.phoneNumber %></p><br>
                        <p><b>Speciality: </b><%= patient.speciality %></p><br>
                        <p><b>Date of Birth: </b><%= patient.DOB %></p><br>
                        <p><b>Date and Time: </b><%= patient.datetime %></p><br>
                        <br>
                        <div>
                            <form action="<%= basePath %>/survey-details/<%= patient.Mr_no %>" method="get" target="_blank">
                                <button type="submit">Show Survey Details</button>
                            </form>
                        </div>
                    </div>



                </div>
            </div>
        </div>
        
<br><hr><br>
        <h3>Doctor's Notes:</h3><br>
        <input type="text" id="search-bar" placeholder="Search notes..." class="search-bar"><br><br>
        <% function formatDate(dateString) { 
            const dateParts = dateString.split('-'); 
            return `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`; 
        } %>

        <div class="doctor-notes">
            <!-- <% if (doctorNotes.length > 0) { %>
                <% doctorNotes.forEach(function(note) { %>
                    <div class="log-entry doctor-note-entry">
                        <div class="log-date">Doctor - <%= formatDate(note.date) %></div>
                        <div class="log-note"><%= note.note %></div>
                    </div>
                <% }); %>
            <% } %> -->
            <% if (doctorNotes.length > 0) { %>
                <% doctorNotes.forEach(function(note) { %>
                    <div class="log-entry doctor-note-entry">
                        <div class="log-date">Doctor - <%= formatDate(note.date) %></div>
                        <div class="log-note">
                            <span class="description">
                                <span class="short-desc"><%= note.note.trim().substring(0, 30) %>...</span>
                                <span class="full-desc" style="display: none;"><%= note.note.trim() %></span>
                            </span>
                            <% if(note.note.length > 30){ %>
                            <a href="javascript:void(0)" class="toggle-desc" onclick="toggleDescription(this)">Show More</a>
                           <% } %>
                        </div>
                    </div>
                <% }); %>                
            <% } %>
            
            <% if (interventions.length > 0) { %>
                <% interventions.forEach(function(intervention) { %>
                    <div class="log-entry intervention-entry">
                        <div class="log-date">Intervention - <%= formatDate(intervention.date) %></div>
                        <div class="log-note"><%= intervention.event %></div>
                    </div>
                <% }); %>
            <% } %>
            <!-- <% if (codes.length > 0) { %>
                <% codes.forEach(function(code) { %>
                    <div class="log-entry icd-code-entry">
                        <div class="log-date">ICD Code - <%= formatDate(code.date) %></div>
                        <div class="log-note"><%= code.code %></div>
                    </div>
                <% }); %>
            <% } %> -->
            <% if (codes.length > 0) { %>
                <% codes.forEach(function(code) { %>
                    <div class="log-entry icd-code-entry">
                        <div class="log-date">ICD Code - <%= formatDate(code.date) %></div>
                        <div class="log-note">
                            <strong><%= code.code.trim() %></strong> - 
                            <span class="description">
                                <span class="short-desc"><%= code.description.trim().substring(0, 30) %>...</span>
                                <span class="full-desc" style="display: none;"><%= code.description.trim() %></span>
                            </span>
                            <a href="javascript:void(0)" class="toggle-desc" onclick="toggleDescription(this)">Show More</a>
                        </div>
                    </div>                                                       
                <% }); %>
            <% } %>                       
            
        </div>

    </div>

    <!-- Loading GIF -->
    <div class="loading-container" id="loadingContainer">
        <img src="<%= basePath %>/assets/photo.GIF" alt="Loading...">
    </div>
</body>



    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        let currentPage = 1;
        const limit = 50;




        $(document).ready(function() {

        $('#code').select2({
    ajax: {
        url: '<%= basePath %>/codes',
        dataType: 'json',
        delay: 250, // Debounce the request by 250ms to prevent too many requests
        data: function(params) {
            return {
                searchTerm: params.term,  // Pass the search term to the API
                page: params.page || 1,   // Pass the current page for pagination
                limit: 50                 // Limit the results per request to 50
            };
        },
        processResults: function(data, params) {
            params.page = params.page || 1;
            return {
                results: data.map(code => ({
                    id: code.code,        // Use the code as the value
                    text: code.description // Use the description as the label
                })),
                pagination: {
                    more: data.length === 50 // Check if more data is available for next page
                }
            };
        },
        cache: true // Cache the results to avoid redundant requests
    },
    placeholder: 'Select ICD Code',
    minimumInputLength: 3, // Require at least 3 characters before searching
    templateResult: formatCode,  // Custom display for code results
    templateSelection: formatCodeSelection // Custom display for selected code
});

    });

    function formatCode(code) {
        if (code.loading) {
            return code.text;
        }
        var $container = $(
            "<div class='select2-result-code clearfix'>" +
            "<div class='select2-result-code__meta'>" +
            "<div class='select2-result-code__description'></div>" +
            "</div>" +
            "</div>"
        );
        $container.find(".select2-result-code__description").text(code.text);
        return $container;
    }

    function formatCodeSelection(code) {
        return code.text || code.id;
    }

        function showMessage(messageId) {
            const message = document.getElementById(messageId);
            message.style.display = 'inline';
            setTimeout(() => {
                message.style.display = 'none';
            }, 2000);
        }





//         function submitForm(event, formId, messageId) {
//     event.preventDefault();
//     const form = document.getElementById(formId);
//     const formData = $(form).serialize();

//     const date = new Date().toISOString().split('T')[0];
//     let note = '';
//     let type = '';

//     if (formId === 'doctor-note-form') {
//         note = document.getElementById('doctor-note').value;
//         type = 'doctor-note';
//     } else if (formId === 'note-form') {
//         note = document.getElementById('note').value;
//         type = 'intervention';
//     } else if (formId === 'code-form') {
//         note = $('#code').val(); // Get the ICD code number
//         type = 'icd-code';
//     }

//     // Immediately add the note to the log for real-time update
//     addDoctorNoteToLog(date, note, type);

//     $.ajax({
//         type: "POST",
//         url: form.action,  // Use the form action for the correct endpoint
//         data: formData,
//         success: function(response) {
//             showMessage(messageId);
//             if (formId === 'doctor-note-form') {
//                 document.getElementById('doctor-note').value = '';  // Clear the input field after submission
//             } else if (formId === 'note-form') {
//                 document.getElementById('note').value = '';
//                 document.getElementById('date').value = '';
//             } else if (formId === 'code-form') {
//                 $('#code').val('').trigger('change');

//                 // Dynamically update ICD code with description from the response
//                 const description = response.description || 'No description available';
//                 const truncatedDescription = description.length > 30 ? description.substring(0, 30) + '...' : description;
//                 addDoctorNoteToLog(response.date, `${response.code} - ${truncatedDescription}`, 'icd-code');
//             }
//         },
//         error: function() {
//             alert('An error occurred. Please try again.');
//             // Remove the note from the log if the AJAX call fails
//             // removeLastLogEntry();
//         }
//     });
// }

// function removeLastLogEntry() {
//     const logContainer = document.querySelector('.doctor-notes');
//     logContainer.removeChild(logContainer.firstChild);
// }



function submitForm(event, formId, messageId) {
    event.preventDefault();
    const form = document.getElementById(formId);
    const formData = $(form).serialize();

    const date = new Date().toISOString().split('T')[0];
    let note = '';
    let type = '';

    if (formId === 'doctor-note-form') {
        note = document.getElementById('doctor-note').value;
        type = 'doctor-note';
    } else if (formId === 'note-form') {
        note = document.getElementById('note').value;
        type = 'intervention';
    } else if (formId === 'code-form') {
        note = $('#code').val(); // Get the ICD code number
        type = 'icd-code';
    }

    // Immediately add the note to the log for real-time update
    addDoctorNoteToLog(date, note, type);

    $.ajax({
        type: "POST",
        url: form.action,  // Use the form action for the correct endpoint
        data: formData,
        success: function(response) {
            showMessage(messageId);
            if (formId === 'doctor-note-form') {
                document.getElementById('doctor-note').value = '';  // Clear the input field after submission
            } else if (formId === 'note-form') {
                document.getElementById('note').value = '';
                document.getElementById('date').value = '';
            } else if (formId === 'code-form') {
                $('#code').val('').trigger('change');

                // Dynamically update ICD code with description from the response
                const description = response.description || 'No description available';
                const truncatedDescription = description.length > 30 ? description.substring(0, 30) + '...' : description;
                addDoctorNoteToLog(response.date, `${response.code} - ${truncatedDescription}`, 'icd-code');
            }
        },
        error: function() {
            // alert('An error occurred. Please try again.');
            // Remove the note from the log if the AJAX call fails
            // removeLastLogEntry();
        }
    });
}


function formatDate(dateString) {
    const dateParts = dateString.split('-');
    return `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`; // Convert YYYY-MM-DD to DD-MM-YYYY
}



// function addDoctorNoteToLog(date, note, type) {
//     const logContainer = document.querySelector('.doctor-notes');

//     // Check if the same log entry already exists to prevent duplication
//     const existingEntries = Array.from(logContainer.querySelectorAll('.log-entry'));
//     const isDuplicate = existingEntries.some(entry => entry.querySelector('.log-note')?.textContent === note);

//     if (isDuplicate) {
//         return; // Prevent adding the same note twice
//     }

//     const newLogEntry = document.createElement('div');
//     newLogEntry.className = 'log-entry';

//     // Add a class based on the type for styling purposes
//     let title = '';
//     let displayNote = note;
    
//     if (type === 'doctor-note') {
//         newLogEntry.classList.add('doctor-note-entry');
//         title = 'Doctor';
//     } else if (type === 'intervention') {
//         newLogEntry.classList.add('intervention-entry');
//         title = 'Intervention';
//     } else if (type === 'icd-code') {
//         newLogEntry.classList.add('icd-code-entry');
//         title = 'ICD Code';

//         // Handle ICD code and description
//         let [code, description] = note.split(' - ');
//         description = description ? description.trim() : "No description available";

//         // If the description is missing or "No description available", skip this entry
//         if (description === "No description available") {
//             return; // Do not add this log entry if there's no valid description
//         }

//         if (description.length > 30) {
//             description = description.substring(0, 30) + '...';
//         }
//         displayNote = `${code} - ${description}`;  // Combine code and description
//     }

//     const formattedDate = formatDate(date);

//     newLogEntry.innerHTML = `
//         <div class="log-date">${title} - ${formattedDate}</div>
//         <div class="log-note">${displayNote}</div>
//     `;

//     logContainer.prepend(newLogEntry); // Append new log entry at the top

//     // Apply fade-in effect using animation
//     newLogEntry.classList.add('fadeIn');
//     setTimeout(() => {
//         newLogEntry.classList.remove('fadeIn');
//     }, 500);

//     // Scroll to the top of the container smoothly
//     logContainer.scrollTop = 0;
// }


function addDoctorNoteToLog(date, note, type) {
    const logContainer = document.querySelector('.doctor-notes');

    // Check if the same log entry already exists to prevent duplication
    const existingEntries = Array.from(logContainer.querySelectorAll('.log-entry'));
    const isDuplicate = existingEntries.some(entry => entry.querySelector('.log-note')?.textContent === note);

    if (isDuplicate) {
        return; // Prevent adding the same note twice
    }

    const newLogEntry = document.createElement('div');
    newLogEntry.className = 'log-entry';

    // Add a class based on the type for styling purposes
    let title = '';
    let displayNote = note;
    
    if (type === 'doctor-note') {
        newLogEntry.classList.add('doctor-note-entry');
        title = 'Doctor';
    } else if (type === 'intervention') {
        newLogEntry.classList.add('intervention-entry');
        title = 'Intervention';
    } else if (type === 'icd-code') {
        newLogEntry.classList.add('icd-code-entry');
        title = 'ICD Code';

        // Handle ICD code and description
        let [code, description] = note.split(' - ');
        description = description ? description.trim() : "No description available";

        // If the description is missing or "No description available", skip this entry
        if (description === "No description available") {
            return; // Do not add this log entry if there's no valid description
        }

        if (description.length > 30) {
            description = description.substring(0, 30) + '...';
        }
        displayNote = `${code} - ${description}`;  // Combine code and description
    }

    const formattedDate = formatDate(date);

    newLogEntry.innerHTML = `
        <div class="log-date">${title} - ${formattedDate}</div>
        <div class="log-note">${displayNote}</div>
    `;

    logContainer.prepend(newLogEntry); // Append new log entry at the top

    // Apply fade-in effect using animation
    newLogEntry.classList.add('fadeIn');
    setTimeout(() => {
        newLogEntry.classList.remove('fadeIn');
    }, 500);

    // Scroll to the top of the container smoothly
    logContainer.scrollTop = 0;
}


// Add the fadeIn class for new entries
document.styleSheets[0].insertRule(`
    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
`, document.styleSheets[0].cssRules.length);

document.styleSheets[0].insertRule(`
    .log-entry.fadeIn {
        animation: fadeIn 0.5s ease-in-out;
    }
`, document.styleSheets[0].cssRules.length);


        function openModal(imageSrc, type, mr_no) {
        const modal = document.getElementById('myModal');
        const modalImage = document.getElementById('modalImage');
        modalImage.src = imageSrc;
        modal.style.display = 'block';
        
        // Load the corresponding iframe content
        const iframe = document.getElementById(`iframe-${type}`);
        iframe.src = `<%= basePath %>/chart?type=${type}&mr_no=${mr_no}`;
    }

    function closeModal() {
        const modal = document.getElementById('myModal');
        modal.style.display = 'none';
    }

    window.onclick = function(event) {
        const modal = document.getElementById('myModal');
        if (event.target == modal) {
            modal.style.display = 'none';
        }
    }




function handleGenerateGraph(event, mrNo, surveyType) {
    event.preventDefault();
    
    // Show the loading GIF
    document.getElementById('loadingContainer').style.display = 'flex';

    $.ajax({
        type: "POST",
        url: "<%= basePath %>/generateGraph",
        data: { Mr_no: mrNo, surveyType: surveyType },
        success: function(response) {
            const port = 3003;
            // Adjust the logic to handle specific file paths for different surveys
            let graphUrl = `<%= basePath %>/Doctor_Login_Page/new_folder_1/${surveyType}.html`;
            
            // Special case for PROMIS-10 to open both physical and mental health graphs
            if (surveyType === 'PROMIS-10') {
                const physicalGraphUrl = `<%= basePath %>/Doctor_Login_Page/new_folder_1/plot_physical_health_${mrNo}.html`;
                const mentalGraphUrl = `<%= basePath %>/Doctor_Login_Page/new_folder_1/plot_mental_health_${mrNo}.html`;
                window.open(physicalGraphUrl, '_blank');
                window.open(mentalGraphUrl, '_blank');
            } else {
                window.open(graphUrl, '_blank');
            }
            
            // Hide the loading GIF after graphs are opened
            document.getElementById('loadingContainer').style.display = 'none';
        },
        error: function() {
            alert('An error occurred while generating the graph. Please try again.');
            
            // Hide the loading GIF in case of error
            document.getElementById('loadingContainer').style.display = 'none';
        }
    });
}


        let btn = document.querySelector('#btn');
    let sidebar = document.querySelector('.sidebar');

    btn.onclick = function() {
        sidebar.classList.toggle('active');
    };

    

    </script>
    <script>
    function loadData(csvPath, callback) {
     d3.csv(csvPath).then(data => {
         console.log("Data loaded:", data); // Debugging line
         data.forEach(d => {
             d.months = +d.months_since_baseline;
             d.score = +d.score;
             d.ymax = +d.ymax;
             d.ymin = +d.ymin;
         });
         callback(data);
     }).catch(error => console.error("Error loading data:", error)); // Error handling
 }
        function loadSeverityLevels(csvPath, scale, callback) {
            d3.csv(csvPath).then(data => {
                const severityLevels = data
                    .filter(d => d.Scale === scale)
                    .map(d => ({
                        level: d.Severity,
                        color: d.Color,
                        range: [+d.Chart_Range_Min, +d.Chart_Range_Max]
                    }));
                console.log("Severity levels loaded:", severityLevels); // Debugging line
                callback(severityLevels);
            }).catch(error => console.error("Error loading severity levels:", error)); // Error handling
        }
    
        function createScales(data, width, height) {
            // const x = d3.scaleLinear()
            //     .domain([d3.min(data, d => d.months), d3.max(data, d => d.months)])
            //     .range([0, width]);

            const x = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.months)])
    .range([0, width * 0.8]); // Compress the space between 0 and 1 (0.8 is an example, you can tweak this)

    
            const y = d3.scaleLinear()
                .domain([+data[0].ymin, +data[0].ymax])
                .range([height, 0]);
    
            return { x, y };
        }
    
       
        // Modify the drawAxes function to only show integer values on the x-axis
function drawAxes(svg, x, y, width, height) {
    // svg.append("g")
    //     .attr("transform", `translate(0,${height})`)
    //     .call(d3.axisBottom(x)
    //         .tickFormat(d => Number.isInteger(d) ? d : "")) // Only display integer tick values
    //     .selectAll("text")
    //     .style("fill", "#777");
    // svg.append("g")
    // .attr("transform", `translate(0,${height})`)
    // .call(d3.axisBottom(x)
    //     .tickFormat(d => Number.isInteger(d) ? d : "") // Only display integer tick values
    //     .ticks(3) // Keep the same number of ticks but compress the 0-1 space
    // )
    // .selectAll("text")
    // .style("fill", "#777");
    svg.append("g")
    .attr("transform", `translate(0,${height})`)
    .call(d3.axisBottom(x)
        .tickFormat(d => Number.isInteger(d) ? d : "") // Only display integer tick values
    )
    .selectAll("text")
    .style("fill", "#777"); // Keep the labels

// Hide the ticks
svg.selectAll(".tick line")
    .style("stroke-opacity", 0); // Make the ticks invisible


    svg.append("g")
        .call(d3.axisLeft(y))
        .selectAll("text")
        .style("fill", "#777");
}

    
        function drawSeverityGridLines(svg, y, width, severityLevels) {
            severityLevels.forEach(severity => {
                svg.append("line")
                    .attr("class", "grid-line")
                    .attr("x1", 0)
                    .attr("x2", width)
                    .attr("y1", y(severity.range[0]))
                    .attr("y2", y(severity.range[0]));
    
                svg.append("line")
                    .attr("class", "grid-line")
                    .attr("x1", 0)
                    .attr("x2", width)
                    .attr("y1", y(severity.range[1]))
                    .attr("y2", y(severity.range[1]));
            });
        }
    
        function drawSeverityLabels(svg, y, width, margin, severityLevels) {
            severityLevels.forEach(severity => {
                svg.append("rect")
                    .attr("x", width + margin.right - 100)
                    .attr("y", y(severity.range[1]))
                    .attr("width", 6)
                    .attr("height", y(severity.range[0]) - y(severity.range[1]))
                    .attr("fill", severity.color);
    
                svg.append("text")
                    .attr("x", width + margin.right - 85)
                    .attr("y", (y(severity.range[0]) + y(severity.range[1])) / 2)
                    .attr("dy", ".35em")
                    .attr("text-anchor", "start")
                    .attr("class", "axis-label")
                    .text(severity.level);
            });
        }
    
        const scoreInterpretation = {
            "PROMIS-10 Physical": "higher",
            "PROMIS-10 Mental": "higher",
            "WEXNER": "lower",
            "ICIQ-UI SF": "lower",
            "PAID": "lower",
            "EPDS": "lower",
            "PROMIS Bank v1.1 - Pain Interference": "lower",
            "PROMIS SF v1.0 - Fatigue-OA-Knee 8a" :"lower",
            "PROMIS SF v1.0 - Depression-OA-Knee 4a" :"lower"
        };

    

    function drawLineAndPoints(svg, data, x, y, line, severityLevels) {
    const tooltip = d3.select("body").append("div")
        .attr("class", "tooltip-chart")
        .style("opacity", 0);

    svg.append("path")
        .datum(data)
        .attr("class", "line")
        .attr("d", line);

    data.forEach((d, i) => {
        const circle = svg.append("circle")
            .attr("class", i === data.length - 1 ? "highlight-circle" : "data-circle")
            .attr("cx", x(d.months))
            .attr("cy", y(d.score))
            .attr("r", i === data.length - 1 ? 8 : 4)
            .attr("fill", i === data.length - 1 ? severityLevels.find(severity => d.score >= severity.range[0] && d.score <= severity.range[1]).color : null)
            .on("mouseover", (event) => {
                tooltip.transition().duration(200).style("opacity", .9);

                let severityColor = "lightsteelblue";
                severityLevels.forEach(severity => {
                    if (d.score >= severity.range[0] && d.score <= severity.range[1]) {
                        severityColor = severity.color;
                    }
                });

                tooltip.html(`<strong>Date:</strong> ${formatDate(d.date)}<br><strong>Score:</strong> ${d.score}`)
                    .style("left", (event.pageX + 20) + "px") // 20px offset to the right
                    .style("top", (event.pageY - 20) + "px") // Align tooltip vertically with a slight upward offset
                    .style("background-color", severityColor);
            }).on("mouseout", () => {
                tooltip.transition().duration(500).style("opacity", 0);
            });
    });
}

    
        function drawAnnotations(svg, data, margin, width, height, traceName) {
            const scoreType = scoreInterpretation[traceName];
            const changeFromFirstVisit = Math.round((data[data.length - 1].score - data[0].score) * 100) / 100;
            const changeFromLastVisit = Math.round((data[data.length - 1].score - data[data.length - 2].score) * 100) / 100;
    
            const getAnnotationText = (change, type, isFirstVisit) => {
                if (type === "higher") {
                    return change > 0 ? `↑ ${change} from ${isFirstVisit ? "first" : "last"} visit` : `↓ ${Math.abs(change)} from ${isFirstVisit ? "first" : "last"} visit`;
                } else {
                    return change < 0 ? `↑ ${Math.abs(change)} from ${isFirstVisit ? "first" : "last"} visit` : `↓ ${change} from ${isFirstVisit ? "first" : "last"} visit`;
                }
            };
    
            const getColor = (change, type) => {
                if (type === "higher") {
                    return change > 0 ? "green" : "red";
                } else {
                    return change < 0 ? "green" : "red";
                }
            };
    
            svg.append("text")
                .attr("class", "annotation")
                .attr("x", margin.left / 2)
                .attr("y", -margin.top / 2.5)
                .text(getAnnotationText(changeFromFirstVisit, scoreType, true))
                .style("fill", getColor(changeFromFirstVisit, scoreType));
    
            svg.append("text")
                .attr("class", "annotation")
                .attr("x", margin.left / 2)
                .attr("y", -margin.top / 2 + 25)
                .text(getAnnotationText(changeFromLastVisit, scoreType, false))
                .style("fill", getColor(changeFromLastVisit, scoreType));
        }
    
        function drawTitleAndLabels(svg, title, margin, width, height) {
            const xAxisLabel = "Months Since Baseline";
    
            svg.append("text")
                .attr("class", "annotation")
                .attr("x", width / 2)
                .attr("y", height + margin.bottom - 10)
                .attr("text-anchor", "middle")
                .text(xAxisLabel);
    
            svg.append("text")
                .attr("class", "annotation")
                .attr("x", width / 2)
                .attr("y", -margin.top + 30)
                .attr("text-anchor", "middle")
                .style("font-size", "18px")
                .text(title);
        }



function drawVerticalEventLines(svg, data, x, y, height) {
    // Define a tooltip for event details
    const eventTooltip = d3.select("body").append("div")
        .attr("class", "tooltip-chart")
        .style("opacity", 0);

    data.forEach(d => {
        if (d.event_date && d.event) {
            const eventDate = new Date(d.event_date);
            const dataDate = new Date(d.date);

            // Compare the months of date and event_date
            if (eventDate.getMonth() === dataDate.getMonth()) {
                const eventX = x(d.months); // Use the 'months' field for X coordinate

                // Draw the vertical line with increased hit area
                svg.append("line")
                    .attr("class", "event-line")
                    .attr("x1", eventX)
                    .attr("x2", eventX)
                    .attr("y1", y(y.domain()[0])) // y-axis minimum
                    .attr("y2", y(y.domain()[1])) // y-axis maximum
                    .style("stroke", "#FF4500") // Customize the line color
                    .style("stroke-width", 10) // Increase the width for better hit area
                    .style("stroke-opacity", 0) // Make the larger hit area invisible
                    .style("pointer-events", "stroke") // Enable pointer events only on the stroke
                    .on("mouseover", function (event) {
                        eventTooltip.transition().duration(200).style("opacity", .9);

                        // Update the tooltip content
                        eventTooltip.html(`<strong>Event:</strong> ${d.event}<br><strong>Date:</strong> ${d.event_date}`)
                            .style("left", (event.pageX + 20) + "px") // Adjust horizontal position
                            .style("top", (event.pageY - 20) + "px");  // Adjust vertical position
                    })
                    .on("mouseout", function () {
                        eventTooltip.transition().duration(500).style("opacity", 0);
                    });

                // Draw the visible line
                svg.append("line")
                    .attr("class", "event-line-visible")
                    .attr("x1", eventX)
                    .attr("x2", eventX)
                    .attr("y1", y(y.domain()[0])) // y-axis minimum
                    .attr("y2", y(y.domain()[1])) // y-axis maximum
                    .style("stroke", "#FF4500") // Customize the line color
                    .style("stroke-width", 3)
                    .style("stroke-dasharray", "4,4"); // Dashed line style
            }
        }
    });
}

    
        function drawChart(data, severityCsvPath, traceName, title) {
            const margin = { top: 80, right: 150, bottom: 50, left: 50 };
            const width = 500 - margin.left - margin.right;
            const height = 350 - margin.top - margin.bottom;
    
            const chartContainer = d3.select("#charts-container")
                .append("div")
                .attr("class", "chart-container");
    
            const svg = chartContainer.append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);
    
            const filteredData = data.filter(d => d.trace_name === traceName);
            loadSeverityLevels(severityCsvPath, traceName, severityLevels => {
                const { x, y } = createScales(filteredData, width, height);
                const line = d3.line()
                    .x(d => x(d.months))
                    .y(d => y(d.score))
                    .curve(d3.curveCardinal);
    
                drawAxes(svg, x, y, width, height);
                drawSeverityGridLines(svg, y, width, severityLevels);
                drawSeverityLabels(svg, y, width, margin, severityLevels);
                drawVerticalEventLines(svg, filteredData, x, y, height); // Draw event lines
    
                // Always draw title and labels
                drawTitleAndLabels(svg, title, margin, width, height);
    
                if (filteredData.length > 0) {
                    drawLineAndPoints(svg, filteredData, x, y, line, severityLevels);
                    drawAnnotations(svg, filteredData, margin, width, height, traceName);
                }
            });
        }
    
// Load data and draw charts for patient_health_scores CSV
loadData("<%= basePath %><%= csvPath %>", data => {
     console.log("Unique trace names:", [...new Set(data.map(d => d.trace_name))]); // Debugging line
     const uniqueTraceNames = [...new Set(data.map(d => d.trace_name))];
     uniqueTraceNames.forEach(traceName => {
         const title = data.find(d => d.trace_name === traceName).title || traceName;
         drawChart(data, "SeverityLevels.csv", traceName, title);
     });
 });

 // Load data and draw charts for API_SURVEYS_Mr_no CSV
 loadData("<%= basePath %><%= csvApiSurveysPath %>", data => {
     console.log("Unique trace names:", [...new Set(data.map(d => d.trace_name))]); // Debugging line
     const uniqueTraceNames = [...new Set(data.map(d => d.trace_name))];
     uniqueTraceNames.forEach(traceName => {
         const title = data.find(d => d.trace_name === traceName).title || traceName;
         drawChart(data, "SeverityLevels.csv", traceName, title);
     });
 });
    </script>

<script>
    function searchNotes() {
      const searchTerm = document.getElementById("search-bar").value.toLowerCase();
      const logEntries = document.querySelectorAll(".log-entry");
    
      if (searchTerm === "") {
        // If search is cleared, show all entries
        logEntries.forEach(entry => {
          entry.style.display = "block";
        });
      } else {
        const exactMatchRegex = /^"(.*)"$/;
        const match = searchTerm.match(exactMatchRegex);
    
        if (match) {
          // Exact match search
          const exactSearchTerm = match[1]; // Extract the term within quotes
          for (const entry of logEntries) {
            const noteText = entry.querySelector(".log-note").textContent.toLowerCase();
            entry.style.display = noteText === exactSearchTerm ? "block" : "none";
          }
        } else {
          // Partial match search
          for (const entry of logEntries) {
            const noteText = entry.querySelector(".log-note").textContent.toLowerCase();
            entry.style.display = noteText.includes(searchTerm) ? "block" : "none";
          }
        }
      }
    }
    
    document.getElementById("search-bar").addEventListener("keyup", searchNotes);
    
      </script>

    <script>
        function showTabContent(id) {
            const contents = document.querySelectorAll('.tab-content');
            const tabs = document.querySelectorAll('.tab');
            
            contents.forEach(content => content.classList.remove('active'));
            tabs.forEach(tab => tab.classList.remove('active'));
            
            document.getElementById(id).classList.add('active');
            document.querySelector(`[onclick="showTabContent('${id}')"]`).classList.add('active');
        }
    
        document.addEventListener('DOMContentLoaded', function() {
            // Show the first tab by default
            showTabContent('doctor-notes');
        });
    </script>
<script>

function toggleDescription(element) {
    const description = element.previousElementSibling;
    const shortDesc = description.querySelector('.short-desc');
    const fullDesc = description.querySelector('.full-desc');
    
    if (fullDesc.style.display === "none") {
        shortDesc.style.display = "none";
        fullDesc.style.display = "inline";
        element.innerText = "Show Less";
    } else {
        shortDesc.style.display = "inline";
        fullDesc.style.display = "none";
        element.innerText = "Show More";
    }
}

    </script>
    
        
    

</html>