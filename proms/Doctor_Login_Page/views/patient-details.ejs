
 <!--this the code that display the all the dynamic graphs-->


 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Details</title>
    <link rel="stylesheet" href="/patientdetails.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <script src="https://d3js.org/d3.v7.min.js"></script>

<style>
          .chart {
      margin: 20px; /* Add margin around each chart */
    }
    .line {
        fill: none;
        stroke: #8a8a8a;
        stroke-width: 2.5px;
    }
    .axis-label, .annotation {
        font-family: 'Roboto', sans-serif;
        font-size: 12px;
    }
    .highlight-circle {
        stroke: #4682b4;
        stroke-width: 2.5px;
    }
    .data-circle {
        fill: #ffffff;
        stroke: #8a8a8a;
        stroke-width: 2.5px;
    }
/* BREATHING EFFECT TO CIRCLES */
@keyframes breathing {
    0% {
        transform: scale(1);
        opacity: 1;
    }
    50% {
        transform: scale(1.2);
        opacity: 0.7;
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}

.highlight-circle {
    transform-box: fill-box;
    transform-origin: center;
    animation: breathing 2s infinite ease-in-out;
}


/* END OF BREATHIGN EFFECT CSS */

    .grid-line {
        stroke: #ddd;
        stroke-width: 1px;
    }
    .chart-container {
        width: 600px;
        /* border-radius: 10px; Add rounded corners */
        box-shadow: -11px -8px 20px 1px rgba(0, 0, 0, 0.1); /* Add shadow for depth */
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* Smooth hover transition */
        border-radius: 15px;
    }

    .chart-container:hover {
        transform: scale(1.01); /* Slightly enlarge the chart on hover */
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); /* Add shadow for depth */
    }
        .chart-iframe {
    width: 1300px;
    height: 100vh;
    border: none;
    overflow: hidden; 
}

    /* Loading GIF */
.loading-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    display: none; /* Initially hide the loading container */
}

.loading-container img {
    width: 70%;  /* Adjust the width to make the GIF smaller */
    height: 70%; /* Adjust the height to make the GIF smaller */
}


    .log-entry.doctor-note-entry {
        background-color: #f0f8ff; /* Light blue for doctor's notes */
        border-left: 5px solid blue; /* Blue strip for doctor's notes */
    }

    .log-entry.intervention-entry {
        background-color: #e6ffe6; /* Light green for interventions */
        border-left: 5px solid green; /* Green strip for interventions */
    }

    .log-entry.icd-code-entry {
        background-color: #fff5e6; /* Light orange for ICD codes */
        border-left: 5px solid orange; /* Orange strip for ICD codes */
    }
</style>


   
</head>

<body style="background-color: #fff;">
    <div class="sidebar">
        <div class="top">
             <div class="logo">
            <img src="/assets/logo.png" alt="WeHealthify">
             </div>
             <i class="bx bx-menu" id="btn"></i>
        </div>
    
<!--         
        <div class="user">
            <div>
                <p class="bold">Doc Username</p>
                <p>Doc Specialty</p>
            </div>
        </div> -->

        <div class="user">
            <div>
                <p class="bold"><%= doctor.username %></p>
                <p><%= doctor.speciality %></p>
            </div>
        </div>
        
        <ul>
            <li>
                <a href="/home">
                    <i class="bx bxs-grid-alt"></i>
                    <span class="nav-item">Dashboard</span>
                </a>
                <span class="tooltip">Dashboard</span>
            </li>
            <!-- <li>
                <a href="#">
                    <i class='bx bx-line-chart'></i>
                    <span class="nav-item">Reports</span>
                </a>
                <span class="tooltip">Reports</span>
            </li>            
            <li>
                <a href="#">
                    <i class='bx bx-group'></i>
                    <span class="nav-item">Patients</span>
                </a>
                <span class="tooltip">Patients</span>
            </li>             -->
            <!-- <li>
                <a href="#">
                    <i class="bx bx-spreadsheet"></i>
                    <span class="nav-item">Surveys</span>
                </a>
                <span class="tooltip">Surveys</span>
            </li> -->
            <li>
                <a href="/logout" class="logout-button">
                    <i class="bx bx-log-out"></i>
                    <span class="nav-item">Logout</span>
                </a>
                <span class="tooltip">Logout</span>
            </li>
            
        </ul>
    </div>

    <div class="main-content">
        <div class="topbar">
            <!-- <h1>Welcome, Dr. Jack</h1> -->
            <h1>Welcome, Dr. <%= doctor.name %></h1>

            <form action="/search" method="GET" class="searchtopbar">
                <input type="text" name="mrNo" placeholder="Quick MR Search" >
                <button type="submit" class="btn-search"><i class='bx bx-search-alt'></i></button>
              </form>
              <div>
                <form action="/survey-details/<%= patient.Mr_no %>" method="get" target="_blank">
                    <button type="submit">Show Survey Details</button>
                </form>
            </div>
            
        </div>
        <hr class="ruledbook">

    
    

<div class="parentrow">
        <div class="parentcolumn">
            <div class="inforow">
                <div class="column">
                    <p><span class="highlight">Mr_no:</span> </p>
                    <p><span class="highlight">Name:</span></p>
                    <p><span class="highlight">Date of Birth:</span></p>
                    <p><span class="highlight">Date and Time:</span></p>
                    <p><span class="highlight">Speciality:</span></p>
                    <p><span class="highlight">Date of Surgery:</span> </p>
                    <p><span class="highlight">Phone Number:</span> </p>
                </div>

                <div class="column">
                    <p><%= patient.Mr_no %></p>
                    <p><%= patient.Name %></p>
                    <p><%= patient.DOB %></p>
                    <p><%= patient.datetime %></p>
                    <p><%= patient.speciality %></p>
                    <p><%= patient.dateOfSurgery %></p>
                    <p><%= patient.phoneNumber %></p>
                </div>
                <div class="column"> </div>
            </div>
<hr class="spacer">
<hr class="ruledbook">
<hr class="spacer">

<div class="inforow">
    <div class="column">
<a>Intervention:</a>

<a>Date:</a>

<a>Diagnosis / ICD Code:</a>  

<a>Doctor's Note:</a>

        </div> 
    <div class="column">
    <div class="form-container">
        <div class="note-form">
            <form id="note-form" action="/addNote" method="POST" onsubmit="submitForm(event, 'note-form', 'note-message')">
                <input type="hidden" name="Mr_no" value="<%= patient.Mr_no %>">
                <input type="text" id="note" name="event" placeholder="Enter your Intervention here" required><br><br>
                <input type="date" id="date" name="date" required>
                <button type="submit" class="add-button"><i class='bx bx-plus'></i> Add</button>
                <span class="success-message" id="note-message">Successfully added!</span>
            </form>
        </div>
<!--         
        <div class="code-form">
            <form id="code-form" action="/addCode" method="POST" onsubmit="submitForm(event, 'code-form', 'code-message')">
                <input type="hidden" name="Mr_no" value="<%= patient.Mr_no %>">
                <select id="code" name="code" required>
                    <option value="" disabled selected>Select a code</option>
                </select>
                <input type="hidden" id="code_date" name="code_date">
                <button type="submit" class="add-button"><i class='bx bx-plus'></i> Add</button>
                <span class="success-message" id="code-message">Successfully added!</span>
            </form>
        </div> -->
        <!-- <div class="code-form">
            <form id="code-form" action="/addCode" method="POST" onsubmit="submitForm(event, 'code-form', 'code-message')">
                <input type="hidden" name="Mr_no" value="<%= patient.Mr_no %>">
                <select id="code" name="code" required>
                    <option value="" disabled selected>Select a code</option>
                </select>
                <input type="hidden" id="code_date" name="code_date">
                <button type="submit" class="add-button"><i class='bx bx-plus'></i> Add</button>
                <span class="success-message" id="code-message">Successfully added!</span>
            </form>
        </div> -->
        <form id="code-form" action="/addCode" method="POST" onsubmit="submitForm(event, 'code-form', 'code-message')">
            <input type="hidden" name="Mr_no" value="<%= patient.Mr_no %>">
            <select id="code" name="code" required>
                <option value="" disabled selected>Select a code</option>
            </select>
            <input type="hidden" id="code_date" name="code_date" value="<%= new Date().toISOString().split('T')[0] %>">
            <button type="submit" class="add-button"><i class='bx bx-plus'></i> Add</button>
            <span class="success-message" id="code-message">Successfully added!</span>
        </form>
        
        
        <div class="note-form">
            <form id="doctor-note-form" action="/addDoctorNote" method="POST" onsubmit="submitForm(event, 'doctor-note-form', 'note-doctor')">
                <input type="hidden" name="Mr_no" value="<%= patient.Mr_no %>">
                <div class="textarea-container">
                    <textarea id="doctor-note" name="doctorNote" placeholder="Enter doctor's note here" required></textarea>
                    <button type="submit"><i class='bx bx-plus'></i> Add</button>
                </div>
                <span class="success-message" id="note-doctor">Successfully added!</span>
            </form>
        </div>

        </div>
    </div>
</div>
<h3>Doctor's Notes:</h3>
<% function formatDate(dateString) { 
    const dateParts = dateString.split('-'); 
    return `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`; 
} %>

<div class="doctor-notes">
   <% if (doctorNotes.length > 0) { %>
       <% doctorNotes.forEach(function(note) { %>
           <div class="log-entry doctor-note-entry">
               <div class="log-date">Doctor - <%= formatDate(note.date) %></div>
               <div class="log-note"><%= note.note %></div>
           </div>
       <% }); %>
   <% } %>
   <% if (interventions.length > 0) { %>
       <% interventions.forEach(function(intervention) { %>
           <div class="log-entry intervention-entry">
               <div class="log-date">Intervention - <%= formatDate(intervention.date) %></div>
               <div class="log-note"><%= intervention.event %></div>
           </div>
       <% }); %>
   <% } %>
   <% if (codes.length > 0) { %>
       <% codes.forEach(function(code) { %>
           <div class="log-entry icd-code-entry">
               <div class="log-date">ICD Code - <%= formatDate(code.date) %></div>
               <div class="log-note"><%= code.code %></div>
           </div>
       <% }); %>
   <% } %>
</div>


        </div>
        <hr class="ruledbook">
        <div class="parentcolumn">
            <div class="inforow">
                <div class="image-container">
                    <div id="charts-container" class="charts-grid">
                        <!-- Each chart will be appended here by D3 -->
                    </div>
                </div>
                
            </div>
        </div>
        
    <div id="myModal" class="modal">
        <span class="close" onclick="closeModal()">&times;</span>
        <div class="modal-content">
            <img id="modalImage" src="" alt="Enlarged Image">
        </div>

    </div>
    </div>

        
        
    </div>

        <!-- Loading GIF -->
<div class="loading-container" id="loadingContainer">
    <img src="/assets/photo.GIF" alt="Loading...">
</div>


    
</body>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        let currentPage = 1;
        const limit = 50;

        // document.addEventListener("DOMContentLoaded", function() {
        //     $('#code').select2();
        //     var currentDate = new Date().toISOString().split('T')[0];
        //     document.getElementById("code_date").value = currentDate;
        //     loadCodes(currentPage, limit);
        // });

        // function loadCodes(page, limit) {
        //     $.ajax({
        //         url: `/codes?page=${page}&limit=${limit}`,
        //         method: 'GET',
        //         success: function(codes) {
        //             const codeSelect = $('#code');
        //             codes.forEach(code => {
        //                 codeSelect.append(new Option(code.description, code.code));
        //             });
        //         },
        //         error: function() {
        //             alert('An error occurred while fetching codes. Please try again.');
        //         }
        //     });
        // }



        $(document).ready(function() {
        $('#code').select2({
            ajax: {
                url: '/codes',
                dataType: 'json',
                delay: 250,
                data: function(params) {
                    return {
                        searchTerm: params.term,
                        page: params.page || 1,
                        limit: 50
                    };
                },
                processResults: function(data, params) {
                    params.page = params.page || 1;
                    return {
                        results: data.map(code => ({
                            id: code.code,
                            text: code.description
                        })),
                        pagination: {
                            more: data.length === 50
                        }
                    };
                },
                cache: true
            },
            placeholder: 'Select a code',
            minimumInputLength: 1,
            templateResult: formatCode,
            templateSelection: formatCodeSelection
        });
    });

    function formatCode(code) {
        if (code.loading) {
            return code.text;
        }
        var $container = $(
            "<div class='select2-result-code clearfix'>" +
            "<div class='select2-result-code__meta'>" +
            "<div class='select2-result-code__description'></div>" +
            "</div>" +
            "</div>"
        );
        $container.find(".select2-result-code__description").text(code.text);
        return $container;
    }

    function formatCodeSelection(code) {
        return code.text || code.id;
    }

        function showMessage(messageId) {
            const message = document.getElementById(messageId);
            message.style.display = 'inline';
            setTimeout(() => {
                message.style.display = 'none';
            }, 2000);
        }

        // function submitForm(event, formId, messageId) {
        //     event.preventDefault();
        //     const form = document.getElementById(formId);
        //     const formData = $(form).serialize();

        //     $.ajax({
        //         type: "POST",
        //         url: form.action,
        //         data: formData,
        //         success: function(response) {
        //             showMessage(messageId);
        //             if (formId === 'doctor-note-form') {
        //                 const noteDate = new Date().toISOString().split('T')[0];
        //                 const noteText = document.getElementById('doctor-note').value;
        //                 addDoctorNoteToLog(noteDate, noteText);
        //                 document.getElementById('doctor-note').value = '';
        //             }
        //         },
        //         error: function() {
        //             alert('An error occurred. Please try again.');
        //         }
        //     });
        // }


//     function submitForm(event, formId, messageId) {
//     event.preventDefault();
//     const form = document.getElementById(formId);
//     const formData = $(form).serialize();

//     $.ajax({
//         type: "POST",
//         url: form.action,
//         data: formData,
//         success: function(response) {
//             showMessage(messageId);
//             if (formId === 'doctor-note-form') {
//                 const noteDate = new Date().toISOString().split('T')[0];
//                 const noteText = document.getElementById('doctor-note').value;
//                 addDoctorNoteToLog(noteDate, noteText, 'doctor-note');
//                 document.getElementById('doctor-note').value = '';
//             } else if (formId === 'note-form') {
//                 addDoctorNoteToLog(response.date, response.event, 'intervention');
//                 document.getElementById('note').value = '';
//                 document.getElementById('date').value = '';
//             } else if (formId === 'code-form') {
//                 addDoctorNoteToLog(response.date, response.code, 'icd-code');
//                 $('#code').val('').trigger('change');
//             }
//         },
//         error: function() {
//             alert('An error occurred. Please try again.');
//         }
//     });
// }



// function submitForm(event, formId, messageId) {
//     event.preventDefault();
//     const form = document.getElementById(formId);
//     const formData = $(form).serialize();

//     const date = new Date().toISOString().split('T')[0];
//     let note = '';
//     let type = '';

//     if (formId === 'doctor-note-form') {
//         note = document.getElementById('doctor-note').value;
//         type = 'doctor-note';
//     } else if (formId === 'note-form') {
//         note = document.getElementById('note').value;
//         type = 'intervention';
//     } else if (formId === 'code-form') {
//         note = $('#code option:selected').text();
//         type = 'icd-code';
//     }

//     // Immediately add the note to the log
//     addDoctorNoteToLog(date, note, type);

//     $.ajax({
//         type: "POST",
//         url: form.action,
//         data: formData,
//         success: function(response) {
//             showMessage(messageId);
//             if (formId === 'doctor-note-form') {
//                 document.getElementById('doctor-note').value = '';
//             } else if (formId === 'note-form') {
//                 document.getElementById('note').value = '';
//                 document.getElementById('date').value = '';
//             } else if (formId === 'code-form') {
//                 $('#code').val('').trigger('change');
//             }
//         },
//         error: function() {
//             alert('An error occurred. Please try again.');
//             // Remove the note from the log if the AJAX call fails
//             removeLastLogEntry();
//         }
//     });
// }

// function removeLastLogEntry() {
//     const logContainer = document.querySelector('.doctor-notes');
//     logContainer.removeChild(logContainer.firstChild);
// }


function submitForm(event, formId, messageId) {
    event.preventDefault();
    const form = document.getElementById(formId);
    const formData = $(form).serialize();

    const date = new Date().toISOString().split('T')[0];
    let note = '';
    let type = '';

    if (formId === 'doctor-note-form') {
        note = document.getElementById('doctor-note').value;
        type = 'doctor-note';
    } else if (formId === 'note-form') {
        note = document.getElementById('note').value;
        type = 'intervention';
    } else if (formId === 'code-form') {
        note = $('#code').val(); // Get the ICD code number
        type = 'icd-code';
    }

    // Immediately add the note to the log
    addDoctorNoteToLog(date, note, type);

    $.ajax({
        type: "POST",
        url: form.action,
        data: formData,
        success: function(response) {
            showMessage(messageId);
            if (formId === 'doctor-note-form') {
                document.getElementById('doctor-note').value = '';
            } else if (formId === 'note-form') {
                document.getElementById('note').value = '';
                document.getElementById('date').value = '';
            } else if (formId === 'code-form') {
                $('#code').val('').trigger('change');
            }
        },
        error: function() {
            alert('An error occurred. Please try again.');
            // Remove the note from the log if the AJAX call fails
            removeLastLogEntry();
        }
    });
}

function removeLastLogEntry() {
    const logContainer = document.querySelector('.doctor-notes');
    logContainer.removeChild(logContainer.firstChild);
}



//         function addDoctorNoteToLog(date, note) {
//     const logContainer = document.querySelector('.doctor-notes');
//     const newLogEntry = document.createElement('div');
//     newLogEntry.className = 'log-entry';
//     newLogEntry.innerHTML = `
//         <div class="log-date">${date}</div>
//         <div class="log-note">${note}</div>
//     `;

//     logContainer.prepend(newLogEntry); // Append new log entry at the top

//     // Force a reflow to ensure the new element is displayed properly
//     logContainer.style.transform = 'scale(1)';

//     // Optionally, force reflow by toggling a class
//     newLogEntry.classList.add('fadeIn');
//     setTimeout(() => {
//         newLogEntry.classList.remove('fadeIn');
//     }, 500);

//     // Use requestAnimationFrame for smoother updates
//     requestAnimationFrame(() => {
//         logContainer.scrollTop = 0; // Scroll to the top if needed
//     });
// }


// function addDoctorNoteToLog(date, note, type) {
//     const logContainer = document.querySelector('.doctor-notes');
//     const newLogEntry = document.createElement('div');
//     newLogEntry.className = 'log-entry';
    
//     // Add a class based on the type for styling purposes
//     if (type === 'doctor-note') {
//         newLogEntry.classList.add('doctor-note-entry');
//     } else if (type === 'intervention') {
//         newLogEntry.classList.add('intervention-entry');
//     } else if (type === 'icd-code') {
//         newLogEntry.classList.add('icd-code-entry');
//     }

//     newLogEntry.innerHTML = `
//         <div class="log-date">${date}</div>
//         <div class="log-note">${note}</div>
//     `;

//     logContainer.prepend(newLogEntry); // Append new log entry at the top

//     // Force a reflow to ensure the new element is displayed properly
//     logContainer.style.transform = 'scale(1)';

//     // Optionally, force reflow by toggling a class
//     newLogEntry.classList.add('fadeIn');
//     setTimeout(() => {
//         newLogEntry.classList.remove('fadeIn');
//     }, 500);

//     // Use requestAnimationFrame for smoother updates
//     requestAnimationFrame(() => {
//         logContainer.scrollTop = 0; // Scroll to the top if needed
//     });
// }


// function addDoctorNoteToLog(date, note, type) {
//     const logContainer = document.querySelector('.doctor-notes');
//     const newLogEntry = document.createElement('div');
//     newLogEntry.className = 'log-entry';

//     // Add a class based on the type for styling purposes
//     if (type === 'doctor-note') {
//         newLogEntry.classList.add('doctor-note-entry');
//     } else if (type === 'intervention') {
//         newLogEntry.classList.add('intervention-entry');
//     } else if (type === 'icd-code') {
//         newLogEntry.classList.add('icd-code-entry');
//     }

//     newLogEntry.innerHTML = `
//         <div class="log-date">${date}</div>
//         <div class="log-note">${note}</div>
//     `;

//     logContainer.prepend(newLogEntry); // Append new log entry at the top
// }



// function addDoctorNoteToLog(date, note, type) {
//     const logContainer = document.querySelector('.doctor-notes');
//     const newLogEntry = document.createElement('div');
//     newLogEntry.className = 'log-entry';
    
//     // Add a class based on the type for styling purposes
//     let title = '';
//     if (type === 'doctor-note') {
//         newLogEntry.classList.add('doctor-note-entry');
//         title = 'Doctor';
//     } else if (type === 'intervention') {
//         newLogEntry.classList.add('intervention-entry');
//         title = 'Intervention';
//     } else if (type === 'icd-code') {
//         newLogEntry.classList.add('icd-code-entry');
//         title = 'ICD Code';
//     }

//     newLogEntry.innerHTML = `
//         <div class="log-date">${title} - ${date}</div>
//         <div class="log-note">${note}</div>
//     `;

//     logContainer.prepend(newLogEntry); // Append new log entry at the top

//     // Force a reflow to ensure the new element is displayed properly
//     logContainer.style.transform = 'scale(1)';

//     // Optionally, force reflow by toggling a class
//     newLogEntry.classList.add('fadeIn');
//     setTimeout(() => {
//         newLogEntry.classList.remove('fadeIn');
//     }, 500);

//     // Use requestAnimationFrame for smoother updates
//     requestAnimationFrame(() => {
//         logContainer.scrollTop = 0; // Scroll to the top if needed
//     });
// }


function formatDate(dateString) {
    const dateParts = dateString.split('-');
    return `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`; // Convert YYYY-MM-DD to DD-MM-YYYY
}

function addDoctorNoteToLog(date, note, type) {
    const logContainer = document.querySelector('.doctor-notes');
    const newLogEntry = document.createElement('div');
    newLogEntry.className = 'log-entry';
    
    // Add a class based on the type for styling purposes
    let title = '';
    if (type === 'doctor-note') {
        newLogEntry.classList.add('doctor-note-entry');
        title = 'Doctor';
    } else if (type === 'intervention') {
        newLogEntry.classList.add('intervention-entry');
        title = 'Intervention';
    } else if (type === 'icd-code') {
        newLogEntry.classList.add('icd-code-entry');
        title = 'ICD Code';
    }

    const formattedDate = formatDate(date);

    newLogEntry.innerHTML = `
        <div class="log-date">${title} - ${formattedDate}</div>
        <div class="log-note">${note}</div>
    `;

    logContainer.prepend(newLogEntry); // Append new log entry at the top

    // Force a reflow to ensure the new element is displayed properly
    logContainer.style.transform = 'scale(1)';

    // Optionally, force reflow by toggling a class
    newLogEntry.classList.add('fadeIn');
    setTimeout(() => {
        newLogEntry.classList.remove('fadeIn');
    }, 500);

    // Use requestAnimationFrame for smoother updates
    requestAnimationFrame(() => {
        logContainer.scrollTop = 0; // Scroll to the top if needed
    });
}


// Add the fadeIn class for new entries
document.styleSheets[0].insertRule(`
    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
`, document.styleSheets[0].cssRules.length);

document.styleSheets[0].insertRule(`
    .log-entry.fadeIn {
        animation: fadeIn 0.5s ease-in-out;
    }
`, document.styleSheets[0].cssRules.length);


        // function openModal(imageSrc) {
        //     const modal = document.getElementById('myModal');
        //     const modalImage = document.getElementById('modalImage');
        //     modalImage.src = imageSrc;
        //     modal.style.display = 'block';
        // }

        // function closeModal() {
        //     const modal = document.getElementById('myModal');
        //     modal.style.display = 'none';
        // }

        // window.onclick = function(event) {
        //     const modal = document.getElementById('myModal');
        //     if (event.target == modal) {
        //         modal.style.display = 'none';
        //     }
        // }


        function openModal(imageSrc, type, mr_no) {
        const modal = document.getElementById('myModal');
        const modalImage = document.getElementById('modalImage');
        modalImage.src = imageSrc;
        modal.style.display = 'block';
        
        // Load the corresponding iframe content
        const iframe = document.getElementById(`iframe-${type}`);
        iframe.src = `/chart?type=${type}&mr_no=${mr_no}`;
    }

    function closeModal() {
        const modal = document.getElementById('myModal');
        modal.style.display = 'none';
    }

    window.onclick = function(event) {
        const modal = document.getElementById('myModal');
        if (event.target == modal) {
            modal.style.display = 'none';
        }
    }


//         function handleGenerateGraph(event, mrNo, surveyType) {
//             event.preventDefault();
//             $.ajax({
//                 type: "POST",
//                 url: "/generateGraph",
//                 data: { Mr_no: mrNo, surveyType: surveyType },
//                 success: function(response) {
//                     const port = 3003;
//                     // Adjust the logic to handle specific file paths for different surveys
//                     let graphUrl = `http://localhost:${port}/Doctor_Login_Page/new_folder_1/${surveyType}.html`;
                    
//                     // Special case for PROMIS-10 to open both physical and mental health graphs
//                     if (surveyType === 'PROMIS-10') {
//                         const physicalGraphUrl = `http://localhost:${port}/Doctor_Login_Page/new_folder_1/plot_physical_health_${mrNo}.html`;
//                         const mentalGraphUrl = `http://localhost:${port}/Doctor_Login_Page/new_folder_1/plot_mental_health_${mrNo}.html`;
//                         window.open(physicalGraphUrl, '_blank');
//                         window.open(mentalGraphUrl, '_blank');
//                     } else {
//                         window.open(graphUrl, '_blank');
//                     }
//                 },
//                 error: function() {
//                     alert('An error occurred while generating the graph. Please try again.');
//                 }
//             });
// }


function handleGenerateGraph(event, mrNo, surveyType) {
    event.preventDefault();
    
    // Show the loading GIF
    document.getElementById('loadingContainer').style.display = 'flex';

    $.ajax({
        type: "POST",
        url: "/generateGraph",
        data: { Mr_no: mrNo, surveyType: surveyType },
        success: function(response) {
            const port = 3003;
            // Adjust the logic to handle specific file paths for different surveys
            let graphUrl = `http://localhost:${port}/Doctor_Login_Page/new_folder_1/${surveyType}.html`;
            
            // Special case for PROMIS-10 to open both physical and mental health graphs
            if (surveyType === 'PROMIS-10') {
                const physicalGraphUrl = `http://localhost:${port}/Doctor_Login_Page/new_folder_1/plot_physical_health_${mrNo}.html`;
                const mentalGraphUrl = `http://localhost:${port}/Doctor_Login_Page/new_folder_1/plot_mental_health_${mrNo}.html`;
                window.open(physicalGraphUrl, '_blank');
                window.open(mentalGraphUrl, '_blank');
            } else {
                window.open(graphUrl, '_blank');
            }
            
            // Hide the loading GIF after graphs are opened
            document.getElementById('loadingContainer').style.display = 'none';
        },
        error: function() {
            alert('An error occurred while generating the graph. Please try again.');
            
            // Hide the loading GIF in case of error
            document.getElementById('loadingContainer').style.display = 'none';
        }
    });
}


        let btn = document.querySelector('#btn');
    let sidebar = document.querySelector('.sidebar');

    btn.onclick = function() {
        sidebar.classList.toggle('active');
    };

    

    </script>
    <script>
     function loadData(csvPath, callback) {
        d3.csv(csvPath).then(data => {
            console.log("Data loaded:", data); // Debugging line
            data.forEach(d => {
                d.months = +d.months_since_baseline;
                d.score = +d.score;
                d.ymax = +d.ymax;
                d.ymin = +d.ymin;
            });
            callback(data);
        }).catch(error => console.error("Error loading data:", error)); // Error handling
    }
    
        function loadSeverityLevels(csvPath, scale, callback) {
            d3.csv(csvPath).then(data => {
                const severityLevels = data
                    .filter(d => d.Scale === scale)
                    .map(d => ({
                        level: d.Severity,
                        color: d.Color,
                        range: [+d.Chart_Range_Min, +d.Chart_Range_Max]
                    }));
                console.log("Severity levels loaded:", severityLevels); // Debugging line
                callback(severityLevels);
            }).catch(error => console.error("Error loading severity levels:", error)); // Error handling
        }
    
        function createScales(data, width, height) {
            const x = d3.scaleLinear()
                .domain([d3.min(data, d => d.months), d3.max(data, d => d.months)])
                .range([0, width]);
    
            const y = d3.scaleLinear()
                .domain([+data[0].ymin, +data[0].ymax])
                .range([height, 0]);
    
            return { x, y };
        }
    
        function drawAxes(svg, x, y, width, height) {
            svg.append("g")
                .attr("transform", `translate(0,${height})`)
                .call(d3.axisBottom(x))
                .selectAll("text")
                .style("fill", "#777");
    
            svg.append("g")
                .call(d3.axisLeft(y))
                .selectAll("text")
                .style("fill", "#777");
        }
    
        function drawSeverityGridLines(svg, y, width, severityLevels) {
            severityLevels.forEach(severity => {
                svg.append("line")
                    .attr("class", "grid-line")
                    .attr("x1", 0)
                    .attr("x2", width)
                    .attr("y1", y(severity.range[0]))
                    .attr("y2", y(severity.range[0]));
    
                svg.append("line")
                    .attr("class", "grid-line")
                    .attr("x1", 0)
                    .attr("x2", width)
                    .attr("y1", y(severity.range[1]))
                    .attr("y2", y(severity.range[1]));
            });
        }
    
        function drawSeverityLabels(svg, y, width, margin, severityLevels) {
            severityLevels.forEach(severity => {
                svg.append("rect")
                    .attr("x", width + margin.right - 100)
                    .attr("y", y(severity.range[1]))
                    .attr("width", 6)
                    .attr("height", y(severity.range[0]) - y(severity.range[1]))
                    .attr("fill", severity.color);
    
                svg.append("text")
                    .attr("x", width + margin.right - 85)
                    .attr("y", (y(severity.range[0]) + y(severity.range[1])) / 2)
                    .attr("dy", ".35em")
                    .attr("text-anchor", "start")
                    .attr("class", "axis-label")
                    .text(severity.level);
            });
        }
    
        const scoreInterpretation = {
            "PROMIS-10 Physical": "higher",
            "PROMIS-10 Mental": "higher",
            "WEXNER": "lower",
            "ICIQ-UI SF": "lower",
            "PAID": "lower",
            "EPDS": "lower",
            "PROMIS Bank v1.1 - Pain Interference": "lower"
        };
    
        // function drawLineAndPoints(svg, data, x, y, line, severityLevels) {
        //     const tooltip = d3.select("body").append("div")
        //         .attr("class", "tooltip")
        //         .style("opacity", 0);
    
        //     svg.append("path")
        //         .datum(data)
        //         .attr("class", "line")
        //         .attr("d", line);
    
        //     // Function to format the date
        //     function formatDate(dateStr) {
        //         const date = new Date(dateStr);
        //         const day = String(date.getDate()).padStart(2, '0');
        //         const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
        //         const year = date.getFullYear();
        //         return `${month}/${day}/${year}`;
        //     }
    
        //     data.forEach(d => {
        //         const circle = svg.append("circle")
        //             .attr("class", "data-circle")
        //             .attr("cx", x(d.months))
        //             .attr("cy", y(d.score))
        //             .attr("r", 4);
    
        //         // Determine the severity color
        //         let severityColor = "lightsteelblue";
        //         severityLevels.forEach(severity => {
        //             if (d.score >= severity.range[0] && d.score <= severity.range[1]) {
        //                 severityColor = severity.color;
        //             }
        //         });
    
        //         // Add hover functionality
        //         circle.on("mouseover", (event) => {
        //             tooltip.transition().duration(200).style("opacity", .9);
        //             tooltip.html(`<strong>Date:</strong> ${formatDate(d.date)}<br><strong>Score:</strong> ${d.score}`)
        //                 .style("left", (event.pageX + 15) + "px")
        //                 .style("top", (event.pageY - 28) + "px")
        //                 .style("background", severityColor);
        //         }).on("mouseout", () => {
        //             tooltip.transition().duration(500).style("opacity", 0);
        //         });
        //     });
    
        //     const lastDataPoint = data[data.length - 1];
    
        //     svg.append("circle")
        //         .attr("class", "highlight-circle")
        //         .attr("cx", x(lastDataPoint.months))
        //         .attr("cy", y(lastDataPoint.score))
        //         .attr("r", 8)
        //         .attr("fill", severityLevels.find(severity => lastDataPoint.score >= severity.range[0] && lastDataPoint.score <= severity.range[1]).color);
    
        //     svg.append("text")
        //         .attr("class", "annotation")
        //         .attr("x", x(lastDataPoint.months) + 10)
        //         .attr("y", y(lastDataPoint.score))
        //         .text(lastDataPoint.score);
        // }
    //     function drawLineAndPoints(svg, data, x, y, line, severityLevels) {
    //     const tooltip = d3.select("body").append("div")
    //         .attr("class", "tooltip")
    //         .style("opacity", 0);
    
    //     svg.append("path")
    //         .datum(data)
    //         .attr("class", "line")
    //         .attr("d", line);
    
    //     // Function to format the date
    //     function formatDate(dateStr) {
    //         const date = new Date(dateStr);
    //         const day = String(date.getDate()).padStart(2, '0');
    //         const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
    //         const year = date.getFullYear();
    //         return `${month}/${day}/${year}`;
    //     }
    
    //     data.forEach((d, i) => {
    //         const circle = svg.append("circle")
    //             .attr("class", i === data.length - 1 ? "highlight-circle" : "data-circle")
    //             .attr("cx", x(d.months))
    //             .attr("cy", y(d.score))
    //             .attr("r", i === data.length - 1 ? 8 : 4)
    //             .attr("fill", i === data.length - 1 ? severityLevels.find(severity => d.score >= severity.range[0] && d.score <= severity.range[1]).color : null)
    //             .on("mouseover", (event) => {
    //                 tooltip.transition().duration(200).style("opacity", .9);
    
    //                 // Determine the severity color
    //                 let severityColor = "lightsteelblue"; // Default color
    //                 severityLevels.forEach(severity => {
    //                     if (d.score >= severity.range[0] && d.score <= severity.range[1]) {
    //                         severityColor = severity.color;
    //                     }
    //                 });
    
    //                 tooltip.html(i === data.length - 1 ? `<strong>Date:</strong> ${formatDate(d.date)}` : `<strong>Date:</strong> ${formatDate(d.date)}<br><strong>Score:</strong> ${d.score}`)
    //                     .style("left", (event.pageX + 15) + "px")
    //                     .style("top", (event.pageY - 28) + "px")
    //                     .style("background-color", severityColor); // Set the dynamic background color
    //             }).on("mouseout", () => {
    //                 tooltip.transition().duration(500).style("opacity", 0);
    //             });
    //     });
    
    //     svg.append("text")
    //         .attr("class", "annotation")
    //         .attr("x", x(data[data.length - 1].months) + 10)
    //         .attr("y", y(data[data.length - 1].score))
    //         .text(data[data.length - 1].score);
    // }
    
    function drawLineAndPoints(svg, data, x, y, line, severityLevels) {
        const tooltip = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);
    
        svg.append("path")
            .datum(data)
            .attr("class", "line")
            .attr("d", line);
    
        // Function to format the date as "13th July"
        function formatDate(dateStr) {
            const date = new Date(dateStr);
            const day = date.getDate();
            const month = date.toLocaleString('default', { month: 'long' }); // Full month name
            const suffix = getOrdinalSuffix(day);
            return `${day}${suffix} ${month}`;
        }
    
        // Function to determine the ordinal suffix for a given day
        function getOrdinalSuffix(day) {
            if (day > 3 && day < 21) return 'th'; // Handles 11th, 12th, 13th, etc.
            switch (day % 10) {
                case 1: return "st";
                case 2: return "nd";
                case 3: return "rd";
                default: return "th";
            }
        }
    
        data.forEach((d, i) => {
            const circle = svg.append("circle")
                .attr("class", i === data.length - 1 ? "highlight-circle" : "data-circle")
                .attr("cx", x(d.months))
                .attr("cy", y(d.score))
                .attr("r", i === data.length - 1 ? 8 : 4)
                .attr("fill", i === data.length - 1 ? severityLevels.find(severity => d.score >= severity.range[0] && d.score <= severity.range[1]).color : null)
                .on("mouseover", (event) => {
                    tooltip.transition().duration(200).style("opacity", .9);
    
                    // Determine the severity color
                    let severityColor = "lightsteelblue"; // Default color
                    severityLevels.forEach(severity => {
                        if (d.score >= severity.range[0] && d.score <= severity.range[1]) {
                            severityColor = severity.color;
                        }
                    });
    
                    tooltip.html(i === data.length - 1 ? `<strong>Date:</strong> ${formatDate(d.date)}` : `<strong>Date:</strong> ${formatDate(d.date)}<br><strong>Score:</strong> ${d.score}`)
                        .style("left", (event.pageX + 15) + "px")
                        .style("top", (event.pageY - 28) + "px")
                        .style("background-color", severityColor); // Set the dynamic background color
                }).on("mouseout", () => {
                    tooltip.transition().duration(500).style("opacity", 0);
                });
        });
    
        svg.append("text")
            .attr("class", "annotation")
            .attr("x", x(data[data.length - 1].months) + 10)
            .attr("y", y(data[data.length - 1].score))
            .text(data[data.length - 1].score);
    }
    
    
        function drawAnnotations(svg, data, margin, width, height, traceName) {
            const scoreType = scoreInterpretation[traceName];
            const changeFromFirstVisit = Math.round((data[data.length - 1].score - data[0].score) * 100) / 100;
            const changeFromLastVisit = Math.round((data[data.length - 1].score - data[data.length - 2].score) * 100) / 100;
    
            const getAnnotationText = (change, type, isFirstVisit) => {
                if (type === "higher") {
                    return change > 0 ? `↑ ${change} from ${isFirstVisit ? "first" : "last"} visit` : `↓ ${Math.abs(change)} from ${isFirstVisit ? "first" : "last"} visit`;
                } else {
                    return change < 0 ? `↑ ${Math.abs(change)} from ${isFirstVisit ? "first" : "last"} visit` : `↓ ${change} from ${isFirstVisit ? "first" : "last"} visit`;
                }
            };
    
            const getColor = (change, type) => {
                if (type === "higher") {
                    return change > 0 ? "green" : "red";
                } else {
                    return change < 0 ? "green" : "red";
                }
            };
    
            svg.append("text")
                .attr("class", "annotation")
                .attr("x", margin.left / 2)
                .attr("y", -margin.top / 2.5)
                .text(getAnnotationText(changeFromFirstVisit, scoreType, true))
                .style("fill", getColor(changeFromFirstVisit, scoreType));
    
            svg.append("text")
                .attr("class", "annotation")
                .attr("x", margin.left / 2)
                .attr("y", -margin.top / 2 + 25)
                .text(getAnnotationText(changeFromLastVisit, scoreType, false))
                .style("fill", getColor(changeFromLastVisit, scoreType));
        }
    
        function drawTitleAndLabels(svg, title, margin, width, height) {
            const xAxisLabel = "Months Since Baseline";
    
            svg.append("text")
                .attr("class", "annotation")
                .attr("x", width / 2)
                .attr("y", height + margin.bottom - 10)
                .attr("text-anchor", "middle")
                .text(xAxisLabel);
    
            svg.append("text")
                .attr("class", "annotation")
                .attr("x", width / 2)
                .attr("y", -margin.top + 30)
                .attr("text-anchor", "middle")
                .style("font-size", "18px")
                .text(title);
        }
    
        function drawChart(data, severityCsvPath, traceName, title) {
            const margin = { top: 80, right: 150, bottom: 50, left: 50 };
            const width = 600 - margin.left - margin.right;
            const height = 400 - margin.top - margin.bottom;
    
            const chartContainer = d3.select("#charts-container")
                .append("div")
                .attr("class", "chart-container");
    
            const svg = chartContainer.append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);
    
            const filteredData = data.filter(d => d.trace_name === traceName);
            loadSeverityLevels(severityCsvPath, traceName, severityLevels => {
                const { x, y } = createScales(filteredData, width, height);
                const line = d3.line()
                    .x(d => x(d.months))
                    .y(d => y(d.score))
                    .curve(d3.curveCardinal);
    
                drawAxes(svg, x, y, width, height);
                drawSeverityGridLines(svg, y, width, severityLevels);
                drawSeverityLabels(svg, y, width, margin, severityLevels);
    
                // Always draw title and labels
                drawTitleAndLabels(svg, title, margin, width, height);
    
                if (filteredData.length > 0) {
                    drawLineAndPoints(svg, filteredData, x, y, line, severityLevels);
                    drawAnnotations(svg, filteredData, margin, width, height, traceName);
                }
            });
        }
    
    // Load data and draw charts for patient_health_scores CSV
    loadData("<%= csvPath %>", data => {
        console.log("Unique trace names:", [...new Set(data.map(d => d.trace_name))]); // Debugging line
        const uniqueTraceNames = [...new Set(data.map(d => d.trace_name))];
        uniqueTraceNames.forEach(traceName => {
            const title = data.find(d => d.trace_name === traceName).title || traceName;
            drawChart(data, "SeverityLevels.csv", traceName, title);
        });
    });
    
    </script>

</html>