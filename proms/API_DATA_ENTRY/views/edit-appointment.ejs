<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Entry Form</title>
    <link rel="stylesheet" href="<%= basePath %>/styles.css"> <!-- Correct the path to your CSS file -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <!-- <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'> -->
    <link rel="stylesheet" href="<%= basePath %>/assets/icons/boxicons/css/boxicons.min.css">
    <link rel="stylesheet" href="<%= basePath %>/css/introjs.min.css">

    <style>

.language-selector {
      text-align: right;
      /* margin: 10px; */
    }

    .required {
  color: red;
  margin-left: 2px;
}

    .language-selector a {
      text-decoration: none;
      margin: 0 10px;
      color: #007BFF;
    }

    .language-selector a.active {
      font-weight: bold;
      text-decoration: underline;
    }
    .language-selector img {
      margin-right: 5px;
      margin-left: 5px;
      width: 20px;
      margin-left: 5px;
      height: auto;
      vertical-align: bottom;
    }

        .middle-section{padding-left: 2.5%;}
        .optional-text {
            font-size: smaller; /* Adjust the size as needed */
            color: gray;       /* Optional: Change color for more distinction */
        }

        button[type="submit"] {
    background: #CBFCC6;
    border-radius: 5px;
    border: 0px;
        color: rgb(0, 0, 0);
        padding: 5px 20px 8px 10px ;
        text-align: center;
        text-decoration: none;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
      }
      
  button[type="submit"]:hover {
        background-color: #45a049; /* Darker green */
        color:#fff;
      }

        .flash-message {
            display: flex;
            justify-content: center;
              margin: 10px 0;
              padding: 10px;
              border-radius: 5px;
          }
  
          .flash-message.error {
              background-color: #f8d7da;
              color: #721c24;
          }
  
          .flash-message.success {
              color: green;
          }

          .cancel-btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    font-size: 0.9rem;
  }
          .cancel-btn {
    background-color: #d9534f;
    color: #fff;
  }

  .s-btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    font-size: 0.9rem;
  }
          .s-btn {
    background-color: #CBFCC6;
    color: #fff;
  }

  .introjs-tooltipbuttons {
    text-align: right; /* Align buttons to the right */

}

.help-btn {
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 15px;
    cursor: pointer;
    font-size: 16px;
    margin: 0px !important;
    transition: background-color 0.3s ease;
}

.help-btn:hover {
    background-color: #0056b3; /* Slightly darker blue on hover */
}


.help-button-container {
    position: fixed;
  bottom: 0;
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: #12171e;
  padding: 12px 0;
  transition: all 0.5s ease;
}

/* Ensure the button aligns well with sidebar's active state */
.sidebar.active .help-btn {
    color: #fff;
    display: flex;
    width: 100%;
    gap: 5px;
    align-items: center;
    text-decoration: none;
    border-radius: 0.8rem;
}

.validation-error {
    border-color: #dc3545 !important;
    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
}

.form-select {
    width: 100%;
    padding: 10px;
    border: 1px solid #5F677C;
    border-radius: 5px;
    appearance: none;
    font-weight: lighter;
    background-color: white;
    color: black;
}

.form-select option {
    background-color: white;
    color: black;
}

.form-select:focus {
    background-color: white;
    color: black;
}

.form-select option:checked {
    background-color: white;
    color: black;
}
        
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="top">
             <div class="logo">
            <img src="<%= basePath %>/assets/images/logo_white.png" alt="WeHealthify">
             </div>
             <i class="bx bx-menu" id="btn"></i>
        </div>
        <br>
        <div class="sidebar-footer">
            <p id="staffLabel" class="bold">Staff</p>
            <p class="bold"><%= doctor.hospitalName %></p><!-- Updated here -->
            <p class="bold"><%= doctor.site_code %></p>   <!-- Updated here -->
        </div>
    
        
        
        <ul>
            <li>
                <a href="<%= basePath %>/home">
                    <i class="bx bxs-grid-alt"></i>
                    <span class="nav-item" id="dashboardLabel">Dashboard</span>
                </a>
                <span class="tooltip" id="dashboardTooltip">Dashboard</span>
            </li>
            <li>
                <a href="<%= basePath %>/data-entry">
                    <i class='bx bx-plus-circle'></i>
                    <span class="nav-item" id="addAppointmentLabel">Add Appointment</span>
                </a>
                <span class="tooltip" id="addAppointmentTooltip">Add Appointment</span>
            </li>            
            <li>
                <a href="<%= basePath %>/logout">
                    <i class="bx bx-log-out"></i>
                    <span class="nav-item" id="logoutLabel">Logout</span>
                </a>
                <span class="tooltip" id="logoutTooltip">Logout</span>
            </li>            
        </ul>
        <div class="help-button-container">
            <button id="helpButton" class="help-btn">
                <span class="nav-item" id="helpLabel">Help </span>
                <i class='bx bx-help-circle'></i>
            </button>
            
        
        </div>
    </div>
    
    <div class="main-content" dir="<%= lng === 'ar' ? 'rtl' : 'ltr' %>">
        <div class="topbar">
            <h2 id="editAppointmentTitle" style="color: #333333;">Edit Appointment</h2>
            
        </div>
        <hr style="opacity: 0.5;">
        <!-- <div class="language-selector" style="text-align: right; padding: 10px; background-color: #f6f5fa;">
            <a href="?lng=en" class="<%= lng === 'en' ? 'active' : '' %>">
                <img src="<%= basePath %>/assets/usa.png" alt="English Flag">English
            </a> |
            <a href="?lng=ar" class="<%= lng === 'ar' ? 'active' : '' %>">
                <img src="<%= basePath %>/assets/flag.png" alt="Arabic Flag">العربية
            </a>
          </div>    -->

    <div class="csv-upload-container" style="max-width: 1100px; margin: auto; margin-top: 25px;">


 <!-- Replace the form section in your edit-appointment.ejs file -->
<div class="container" data-title="Edit" data-intro="Edit the respective inputs of the patient">
    <div class="middle-section">
        <br><br>
        <form id="dataForm" method="POST" action="<%= basePath %>/api-edit">
            <!-- Basic Patient Information -->
            <div class="form-group">
                <label for="Mr_no" class="form-label">National ID<span class="required">*</span></label>
                <input type="text" id="Mr_no" class="form-input" name="mrNo" readonly required value="<%= patient.mrNo %>">
            </div>
            
            <div class="form-group">
                <label for="bupa_membership_number" class="form-label">Bupa Membership Number<span class="required">*</span></label>
                <input type="text" class="form-input" id="bupa_membership_number" name="bupa_membership_number" 
                       pattern="^\d{7,8}$" minlength="7" maxlength="8" required title="Bupa Membership Number must be 7-8 digits"
                       value="<%= patient.bupa_membership_number || '' %>">
            </div>
            
            <div class="form-group">
                <label for="member_type" class="form-label" id="MemberType">Member Type<span class="required">*</span></label>
                <input type="text" class="form-input" id="member_type" name="member_type" 
                       pattern="[A-Za-z ]+" required title="Member Type should contain only alphabets"
                       value="<%= patient.member_type || '' %>">
            </div>
            
            <div class="form-group">
                <label for="DOB" id="dobLabel" class="form-label">Date of Birth:<span class="required">*</span></label>
                <input type="text" class="form-input" id="DOB" name="DOB" required value="<%= patient.DOB %>">
            </div>
            
            <div class="form-group">
                <label id="firstNameLabel" for="firstName" class="form-label">First Name:<span class="required">*</span></label>
                <input type="text" id="firstName" class="form-input" name="firstName" 
                       pattern="[A-Za-z ]+" required title="First Name should contain only alphabets"
                       value="<%= patient.firstName %>">
            </div>
            
            <div class="form-group">
                <label for="lastName" id="lastNameLabel" class="form-label">Family Name:<span class="required">*</span></label>
                <input type="text" id="lastName" class="form-input" name="lastName" 
                       pattern="[A-Za-z ]+" required title="Last Name should contain only alphabets"
                       value="<%= patient.lastName %>">
            </div>
            
            <div class="form-group">
                <label for="gender-select" id="genderLabel" class="form-label">
                    Gender<span class="required">*</span>
                </label>
                
                <select id="gender-select" class="form-input" name="gender" required>
                    <% 
                    const currentGender = patient.gender ? patient.gender.toLowerCase() : '';
                    const hasGender = currentGender && currentGender.trim() !== '';
                    %>
                    
                    <option value="" disabled <%= !hasGender ? 'selected' : '' %>>Select Gender</option>
                    <option value="male" <%= currentGender === 'male' ? 'selected' : '' %>>Male</option>
                    <option value="female" <%= currentGender === 'female' ? 'selected' : '' %>>Female</option>
                    <option value="other" <%= currentGender === 'other' ? 'selected' : '' %>>Other</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="phoneNumber" id="phoneNumberLabel" class="form-label">Phone Number<span class="required">*</span></label>
                <input type="tel" id="phoneNumber" class="form-input" name="phoneNumber" 
                       placeholder="0XXXXXXXXX" required pattern="^(0\d{9})$"
                       title="Phone number must start with 0 and be 10 digits"
                       value="<%= patient.phoneNumber %>">
            </div>
            
            <div class="form-group">
                <label for="city" class="form-label" id="City">City<span class="required">*</span></label>
                <input type="text" class="form-input" id="city" name="city" 
                       pattern="[A-Za-z ]+" required title="City should contain only alphabets"
                       value="<%= patient.city || '' %>">
            </div>
            
            <div class="form-group">
                <label for="email" id="emailLabel" class="form-label">Email (Optional)</label>
                <input type="email" id="email" class="form-input" name="email" 
                       value="<%= patient.email || '' %>">
            </div>

                    <!-- Appointment Information -->
        <div class="form-group">
            <label for="datetime" id="appointmentDateTimeLabel" class="form-label">Appointment Date & Time<span class="required">*</span></label>
            <input type="datetime-local" id="datetime" class="form-input" name="datetime" required 
                   value="<%= patient.datetime %>">
        </div>
        
        <!-- Provider Information -->
        <div class="form-group">
            <label for="primary_provider_name" class="form-label" id="PrimaryProviderName">Primary Provider Name<span class="required">*</span></label>
            <select style="font-weight: 400;" id="primary_provider_name" name="primary_provider_name" class="form-select" required>
                <option  id="PrimaryProviderNamee" value="" disabled>Select Provider</option>
                <!-- Options will be populated dynamically -->
            </select>
        </div>

        <div class="form-group">
            <label for="primary_provider_code" class="form-label" id="PrimaryProviderCode">Primary Provider Code<span class="required">*</span></label>
            <select style="font-weight: 400;" id="primary_provider_code" name="primary_provider_code" class="form-select" readonly required>
                <option id="PrimaryProviderCodee" value="" disabled>Select Provider Code</option>
            </select>
        </div>

            <a href="<%= basePath %>/home">
                <button type="button" id="backButton" class="cancel-btn">Back</button>
            </a>
    </div>

    <div class="right-section">
        <br><br>
        

        
        <div class="form-group">
            <label for="secondary_provider_name" class="form-label" id="SecondaryProviderName">Secondary Provider Name</label>
            <input type="text" class="form-input" id="secondary_provider_name" name="secondary_provider_name" 
                   pattern="[A-Za-z\s]+" value="<%= patient.secondary_provider_name || '' %>">
        </div>
        
        <div class="form-group">
            <label for="secondary_provider_code" class="form-label" id="SecondaryProviderCode">Secondary Provider Code</label>
            <input type="text" class="form-input" id="secondary_provider_code" name="secondary_provider_code" 
                   pattern="^\d{5}$" value="<%= patient.secondary_provider_code || '' %>">
        </div>
        
        <!-- Doctor Information -->
            <div class="form-group">
                <label for="speciality-doctor" id="doctorLabel" class="form-label">Primary Doctor's Name & Specialty<span class="required">*</span></label>
                <input type="text" id="speciality-doctor" class="form-input" name="speciality-doctor" readonly required 
                    value="<%= patient.speciality || '' %>">
            </div>
        
        <div class="form-group">
            <label for="secondary_doctors_name" class="form-label" id="SecondaryDoctorName">Secondary Doctors' Name</label>
            <input type="text" class="form-input" id="secondary_doctors_name" name="secondary_doctors_name" 
                   pattern="^[A-Za-z\s]+$" title="Alphabets and spaces only"
                   value="<%= patient.secondary_doctors_name || '' %>">
        </div>
        
        <!-- Contract Information -->
        <div class="form-group">
            <label for="contract_no" class="form-label" id="ContractNumber">Contract Number<span class="required">*</span></label>
            <input type="text" class="form-input" id="contract_no" name="contract_no" 
                   pattern="^\d{1,8}$" required title="Contract Number must be numeric and up to 8 digits"
                   value="<%= patient.contract_no || '' %>">
        </div>
        
        <div class="form-group">
            <label for="contract_name" class="form-label" id="ContractName">Contract Name<span class="required">*</span></label>
            <input type="text" class="form-input" id="contract_name" name="contract_name" 
                   pattern="^[A-Za-z0-9\s\-_.()]+$" required title="Contract Name can include alphabets, numbers, and special characters"
                   value="<%= patient.contract_name || '' %>">
        </div>
        
        <!-- Policy Information -->
        <div class="form-group">
            <label for="policy_status" class="form-label" id="PolicyStatus">Policy Status<span class="required">*</span></label>
            <select id="policy_status" name="policy_status" class="form-input" required>
                <option id="PolicyStatusD" value="" disabled>Select Policy Status</option>
                <option id="Active" value="Active" <%= patient.policy_status === 'Active' ? 'selected' : '' %>>Active</option>
                <option id="Terminated" value="Terminated" <%= patient.policy_status === 'Terminated' ? 'selected' : '' %>>Terminated</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="policy_end_date" class="form-label" id="PolicyEndDate">Policy End Date<span class="required">*</span></label>
            <input type="text" class="form-input" id="policy_end_date" name="policy_end_date" required
                   value="<%= patient.policy_end_date || '' %>">
        </div>
        
        <!-- Medical Information -->
        <div class="form-group">
            <label for="primary_diagnosis" class="form-label" id="PrimaryDiagnosis">Primary Diagnosis<span class="required">*</span></label>
            <input type="text" class="form-input" id="primary_diagnosis" name="primary_diagnosis" 
                   pattern="[A-Za-z\s]+" required title="Primary Diagnosis should contain only alphabets"
                   value="<%= patient.primary_diagnosis || '' %>">
        </div>
        
        <div class="form-group">
            <label for="confirmed_pathway" class="form-label" id="ConfirmedPathway">Confirmed Pathway</label>
            <input type="text" class="form-input" id="confirmed_pathway" name="confirmed_pathway" 
                   pattern="[A-Za-z\s]+" title="Confirmed Pathway should contain only alphabets"
                   value="<%= patient.confirmed_pathway || '' %>">
        </div>
        
        <div class="form-group">
            <label for="care_navigator_name" class="form-label" id="CareNavigatorName">Care Navigator Name</label>
            <input type="text" class="form-input" id="care_navigator_name" name="care_navigator_name" 
                   pattern="[A-Za-z\s]+" title="Care Navigator Name should contain only alphabets"
                   value="<%= patient.care_navigator_name || '' %>">
        </div>

        <!-- Hidden Fields -->
        <input type="hidden" id="hospitalCode" name="hospital_code" value="<%= hospital_code %>">
        <input type="hidden" name="site_code" value="<%= site_code %>">
        <input type="hidden" name="surveyStatus" value="<%= patient.surveyStatus || 'Not Completed' %>">

        <button id="submitButton" type="submit" class="submit-btn" data-title="Submit" 
                data-intro="Submit to save edited patient data">
            <i class='bx bx-check-double'></i> Submit
        </button>
        
        </form>
    </div>
</div>

    <!-- Confirmation message -->
    

    <% if (errorMessage.length > 0) { %>
        <div class="flash-message error"><%= errorMessage %></div>
        <%# --- ADD THIS SCRIPT BLOCK --- %>
        <script>
            setTimeout(() => {
                const errorElement = document.querySelector('.flash-message.error');
                if (errorElement) { // Check if the element exists before trying to hide it
                    errorElement.style.display = 'none';
                }
            }, 5000); // 5000 milliseconds = 5 seconds
        </script>
        <%# --- END OF ADDED SCRIPT BLOCK --- %>
    <% } %>

    <% if (successMessage.length > 0) { %>
        <div class="flash-message success"><%= successMessage %></div>
        <script>
            // Existing script for success message (hides after 3 seconds)
            setTimeout(() => {
                const successElement = document.querySelector('.flash-message.success');
                 if (successElement) {
                    successElement.style.display = 'none';
                 }
            }, 3000); // Currently 3 seconds
        </script>
    <% } %>

        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const getCookie = (name) => {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        };
        const params = new URLSearchParams(window.location.search);
        let currentLanguage = params.get('lng') || getCookie('lng') || 'en';
        
        // Set the language cookie
        document.cookie = `lng=${currentLanguage}; path=/`;
              const fetchUrl = `/stafflogin/locales/${currentLanguage}/translation.json`;
        
          
              // Set the `lang` and `dir` attributes for the HTML document
             
          
              fetch(fetchUrl)
                .then(response => {
                  if (!response.ok) {
                    console.warn(`Translation file not found for language: ${currentLanguage}. Falling back to English.`);
                    return fetch(`/stafflogin/locales/en/translation.json`);
                  }
                  return response.json();
                })
                .then(translations => {
                  console.log('Loaded translations:', translations);
          
                  // Update the elements based on translation keys
                  Object.keys(translations).forEach(id => {
                    const element = document.getElementById(id);
          
                    if (element) {
                        const translationValue = translations[id];
        
                        if (typeof translationValue === 'string') {
                            // Update regular text or HTML content
                            element.innerHTML = translationValue;
                        }
                          if (element.tagName === "INPUT" || element.tagName === "TEXTAREA") {
        
                            // Update placeholders for input elements
        
                            console.log(`Updating placeholder for ${id}:`, translationValue);
        
                            element.placeholder = translationValue;
        
                          }
                        else if (typeof translationValue === 'object') {
                                                // Handle nested object (e.g., lists)
                                                element.innerHTML = ''; // Clear existing content
                                                Object.values(translationValue).forEach(item => {
                                                    const listItem = document.createElement('li');
                                                    listItem.textContent = item;
                                                    element.appendChild(listItem);
                                                });
                        } else {
                            console.warn(`Unexpected translation value type for "${id}":`, translationValue);
                        }
                    }
                  });
                })
                .catch(error => console.error('Error loading translations:', error));
            });
          </script>

    <!-- Include Flatpickr library -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/en.js"></script>

    <script src="<%= basePath %>/js/intro.min.js"></script>
    <script>
        document.getElementById('helpButton').addEventListener('click', function () {
    // Determine the current language (default to English)
    const lang = new URLSearchParams(window.location.search).get('lng') || getCookie('lng') || 'en';

    // Define translations for the steps
    const translations = {
        en: {
            step1: "Edit details of the existing patient.",
            step2: "Edit the respective inputs for the patient as needed.",
            step3: "Submit to save the edited patient data."
        },
        ar: {
            step1: "تحرير تفاصيل المريض الحالي.",
            step2: "قم بتحرير الإدخالات المناسبة للمريض حسب الحاجة.",
            step3: "أرسل لحفظ بيانات المريض المعدلة."
        }
    };

    // Define the steps for Intro.js
    const introSteps = [
        {
            element: '.main-container', // Form container
            intro: translations[lang].step1
        },
        {
            element: '.container', // Container for editing inputs
            intro: translations[lang].step2
        },
        {
            element: '#submitButton', // Submit button
            intro: translations[lang].step3
        }
    ];

    // Initialize and start Intro.js with dynamic labels for buttons
    introJs()
        .setOptions({
            steps: introSteps,
            rtl: lang === 'ar', // Enable RTL if the language is Arabic
            nextLabel: lang === 'ar' ? 'التالي' : 'Next',
            prevLabel: lang === 'ar' ? 'السابق' : 'Back',
            doneLabel: lang === 'ar' ? 'تم' : 'Done'
        })
        .start();
});

// Helper function to retrieve a cookie value by name
function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
}

        
    </script>
    <script>
document.addEventListener('DOMContentLoaded', function() {
    const datetimeInput = document.getElementById('datetime');
    const existingValue = datetimeInput.value;
        
    // Function to parse various datetime formats
    function parseDateTime(dateTimeStr) {
        if (!dateTimeStr) return null;
        
        let date;
        
    
        if (dateTimeStr.includes(',') && (dateTimeStr.includes('AM') || dateTimeStr.includes('PM'))) {
            date = new Date(dateTimeStr);
        }
   
        else if (dateTimeStr.includes('AM') || dateTimeStr.includes('PM')) {
            date = new Date(dateTimeStr);
        }

        else if (dateTimeStr.includes('T')) {
            date = new Date(dateTimeStr);
        }

        else if (dateTimeStr.match(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}/)) {
            date = new Date(dateTimeStr);
        }

        else if (dateTimeStr.includes('-') && dateTimeStr.includes(':')) {
            date = new Date(dateTimeStr);
        }
        else {

            date = new Date(dateTimeStr);
        }
        
        return isNaN(date.getTime()) ? null : date;
    }
    
    // Parse the existing datetime
    const parsedDate = parseDateTime(existingValue);
    
    if (parsedDate) {
        
        // Convert to datetime-local format for the input
        const year = parsedDate.getFullYear();
        const month = String(parsedDate.getMonth() + 1).padStart(2, '0');
        const day = String(parsedDate.getDate()).padStart(2, '0');
        const hours = String(parsedDate.getHours()).padStart(2, '0');
        const minutes = String(parsedDate.getMinutes()).padStart(2, '0');
        
        const datetimeLocalValue = `${year}-${month}-${day}T${hours}:${minutes}`;
        
        // Set the converted value before initializing Flatpickr
        datetimeInput.value = datetimeLocalValue;
    }
    
    // Initialize Flatpickr
    flatpickr("#datetime", {
        enableTime: true,
        dateFormat: "m-d-Y h:i K", // Store in your preferred format
        time_24hr: false,
        minuteIncrement: 15,
        minDate: "today",
        altInput: true,
        altFormat: "F j, Y h:i K",
        // Don't set defaultHour - let it use the actual time from the data
        parseDate: function(datestr, format) {
            // Custom parsing if needed
            return parseDateTime(datestr);
        }
    });
    
    // Initialize DOB Flatpickr
    flatpickr("#DOB", {
        dateFormat: "m/d/Y",
        maxDate: "today",
        altInput: true,
        altFormat: "m/d/Y",
    });
});
</script>
    <script>
        let btn = document.querySelector('#btn');
        let sidebar = document.querySelector('.sidebar');
        
        btn.onclick = function() {
            sidebar.classList.toggle('active');
        };
        
        // Show the loading GIF when the form is submitted
        document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', function() {
                document.getElementById('loadingContainer').style.display = 'flex';
            });
        });
        
        
        </script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
      const sidebarLinks = document.querySelectorAll('.sidebar ul li a');
    
      function removeCurrentPageClasses() {
          sidebarLinks.forEach(link => {
              link.classList.remove('CurrentPage');
          });
      }
    
      function setCurrentPageLink(path) {
          removeCurrentPageClasses();
          console.log(`Setting CurrentPage link for path: ${path}`);
          const currentPageLink = Array.from(sidebarLinks).find(link => {
              const linkPath = new URL(link.href).pathname;
              return linkPath === path;
          });
          if (currentPageLink) {
              console.log(`CurrentPage link found: ${currentPageLink.href}`);
              currentPageLink.classList.add('CurrentPage');
          } else {
              console.log(`No CurrentPage link found for path: ${path}`);
          }
      }
    
      // Check the URL path and set the current page link on page load
      const currentPath = window.location.pathname;
      console.log(`Current path: ${currentPath}`);
      setCurrentPageLink(currentPath);
    
      sidebarLinks.forEach(link => {
          link.addEventListener('click', function() {
              const targetPath = new URL(link.href).pathname;
              console.log(`Navigating to: ${targetPath}`);
              setCurrentPageLink(targetPath);
          });
      });
    });
    </script>

    <script>
document.addEventListener('DOMContentLoaded', function() {    
    // List of all form fields we expect to have values
    const expectedFields = [
        'Mr_no',
        'bupa_membership_number',
        'member_type',
        'DOB',
        'firstName',
        'lastName',
        'gender-select',
        'phoneNumber',
        'city',
        'email',
        'datetime',
        'primary_provider_name',
        'primary_provider_code',
        'secondary_provider_name',
        'secondary_provider_code',
        'speciality-doctor',
        'secondary_doctors_name',
        'contract_no',
        'contract_name',
        'policy_status',
        'policy_end_date',
        'primary_diagnosis',
        'confirmed_pathway',
        'care_navigator_name'
    ];
    
    const emptyFields = [];
    const populatedFields = [];
    
    expectedFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            const value = field.value.trim();
            if (value === '' || value === 'Select Gender' || value === 'Select Policy Status') {
                emptyFields.push(fieldId);
                
            } else {
                populatedFields.push({ id: fieldId, value: value });
                
            }
        } else {
            
        }
    });
    
});

// Function to manually check a specific field value
function checkFieldValue(fieldId) {
    const field = document.getElementById(fieldId);
    if (field) {
        
        return field.value;
    } else {
        
        return null;
    }
}

// Function to manually set a field value for testing
function setFieldValue(fieldId, value) {
    const field = document.getElementById(fieldId);
    if (field) {
        field.value = value;
        // console.log(`Set ${fieldId} to "${value}"`);
        
        // Trigger change event in case there are listeners
        field.dispatchEvent(new Event('change', { bubbles: true }));
    } else {
        
    }
}
</script>
<script>
    document.getElementById('dataForm').addEventListener('submit', function(event) {
       
               
        // Log form data for debugging
        const formData = new FormData(this);
        for (let [key, value] of formData.entries()) {
            console.log(`${key}: ${value}`);
        }
    });

        // Initialize Flatpickr for Policy End Date
    flatpickr("#policy_end_date", {
        dateFormat: "m/d/Y",
        altInput: true,
        altFormat: "m/d/Y",
        minDate: "today"
    });

        // === Enhanced Provider Dropdown Population ===
    function initializeProviders() {
        const basePath = '<%= basePath %>';
        const providerUrl = `${basePath}/providers.json`;
        
        // console.log('Loading providers from:', providerUrl);
        
        fetch(providerUrl)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(providerData => {
                // console.log('Provider data loaded successfully:', providerData.length, 'providers');
                
                const nameSelect = document.getElementById('primary_provider_name');
                const codeSelect = document.getElementById('primary_provider_code');
                
                if (!nameSelect || !codeSelect) {
                    console.error('Provider select elements not found');
                    return;
                }
                
                // Clear existing options
                nameSelect.innerHTML = '<option value="" disabled>Select Provider</option>';
                codeSelect.innerHTML = '<option value="" disabled>Select Provider Code</option>';
                
                const currentProviderName = '<%= patient.primary_provider_name || "" %>';
                const currentProviderCode = '<%= patient.primary_provider_code || "" %>';
                
               
                
                let foundProvider = false;
                
                // Populate provider names
                providerData.forEach(provider => {
                    const option = document.createElement('option');
                    option.value = provider.primary_provider_name;
                    option.textContent = provider.primary_provider_name;
                    
                    // Set selected if this matches the patient's current provider
                    if (provider.primary_provider_name === currentProviderName) {
                        option.selected = true;
                        foundProvider = true;
                        
                        
                        // Also set the corresponding code
                        codeSelect.innerHTML = '';
                        const codeOption = document.createElement('option');
                        codeOption.value = provider.primary_provider_code;
                        codeOption.textContent = provider.primary_provider_code;
                        codeOption.selected = true;
                        codeSelect.appendChild(codeOption);
                        // console.log('✅ Set provider code:', provider.primary_provider_code);
                    }
                    
                    nameSelect.appendChild(option);
                });
                
                if (!foundProvider && currentProviderName) {
                    console.warn('⚠️ Provider not found in data:', currentProviderName);
                }
                
                // Handle provider name change
                nameSelect.addEventListener('change', function() {
                    const selectedName = this.value;
                    const selectedProvider = providerData.find(p => p.primary_provider_name === selectedName);
                    
                    if (selectedProvider) {
                        codeSelect.innerHTML = '';
                        const codeOption = document.createElement('option');
                        codeOption.value = selectedProvider.primary_provider_code;
                        codeOption.textContent = selectedProvider.primary_provider_code;
                        codeOption.selected = true;
                        codeSelect.appendChild(codeOption);
                        // console.log('Provider changed to:', selectedName, 'Code:', selectedProvider.primary_provider_code);
                    }
                });
            })
            .catch(error => {
                console.error('Error loading providers:', error);
                console.error('Provider URL attempted:', providerUrl);
                
                // Show user-friendly error
                const nameSelect = document.getElementById('primary_provider_name');
                if (nameSelect) {
                    nameSelect.innerHTML = '<option value="" disabled>Error loading providers</option>';
                }
            });
    }
    // === Enhanced Form Validation ===
const validationRules = [
    // Required fields
    {
      id: 'Mr_no',
      regex: /^[0-9A-Za-z]{10}$/,
      message: 'National ID must be 10 digits or alphanumeric'
    },
    {
      id: 'bupa_membership_number',
      regex: /^\d{7,8}$/,
      message: 'Bupa Membership Number must be 7-8 digits'
    },
    {
      id: 'member_type',
      regex: /^[A-Za-z ]+$/,
      message: 'Member Type should contain only alphabets'
    },
    {
      id: 'DOB',
      regex: /^(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|3[01])\/([12]\d{3})$/,
      message: 'Date of Birth is required in MM/DD/YYYY format'
    },
    {
      id: 'firstName',
      regex: /^[A-Za-z ]+$/,
      message: 'First Name should contain only alphabets'
    },
    {
      id: 'lastName',
      regex: /^[A-Za-z ]+$/,
      message: 'Family Name should contain only alphabets'
    },
    {
      id: 'gender-select',
      validate: () => document.getElementById('gender-select').value !== '',
      message: 'Gender is required'
    },
    {
      id: 'phoneNumber',
      regex: /^0\d{9}$/,
      message: 'Phone number must start with 0 and be 10 digits'
    },
    {
      id: 'city',
      regex: /^[A-Za-z\s]+$/,
      message: 'City should contain only alphabets and spaces'
    },
    {
      id: 'datetime',
      regex: /.+/,
      message: 'Appointment Date & Time is required'
    },
    {
      id: 'primary_provider_name',
      validate: () => document.getElementById('primary_provider_name').value !== '',
      message: 'Primary Provider Name is required'
    },
    {
      id: 'primary_provider_code',
      validate: () => document.getElementById('primary_provider_code').value !== '',
      message: 'Primary Provider Code is required'
    },
    {
      id: 'speciality-doctor',
      validate: () => document.getElementById('speciality-doctor').value !== '',
      message: "Please select doctor's name and specialty"
    },
    {
      id: 'contract_no',
      regex: /^\d{1,8}$/,
      message: 'Contract Number must be numeric and up to 8 digits'
    },
    {
      id: 'contract_name',
      regex: /^[A-Za-z0-9\s\-_.()]+$/,
      message: 'Contract Name can include alphabets, numbers, and specific symbols'
    },
    {
      id: 'policy_status',
      validate: () => document.getElementById('policy_status').value !== '',
      message: 'Policy Status is required'
    },
    {
      id: 'policy_end_date',
      regex: /^(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|3[01])\/([12]\d{3})$/,
      message: 'Policy End Date is required in MM/DD/YYYY format'
    },
    {
      id: 'primary_diagnosis',
      regex: /^[A-Za-z\s]+$/,
      message: 'Primary Diagnosis should contain only alphabets'
    },
    
    // Optional fields with validation when filled
    {
      id: 'secondary_provider_name',
      regex: /^[A-Za-z\s]+$/,
      message: 'Secondary Provider Name should contain only alphabets',
      optional: true
    },
    {
      id: 'secondary_provider_code',
      regex: /^\d{5}$/,
      message: 'Secondary Provider Code must be 5 digits',
      optional: true
    },
    {
      id: 'secondary_doctors_name',
      regex: /^[A-Za-z\s]+$/,
      message: 'Secondary Doctors Name should contain only alphabets',
      optional: true
    },
    {
      id: 'confirmed_pathway',
      regex: /^[A-Za-z\s]*$/,
      message: 'Confirmed Pathway should contain only alphabets',
      optional: true
    },
    {
      id: 'care_navigator_name',
      regex: /^[A-Za-z\s]*$/,
      message: 'Care Navigator Name should contain only alphabets',
      optional: true
    },
    {
      id: 'email',
      regex: /^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
      message: 'Please enter a valid email address',
      optional: true
    }
  ];

    validationRules.forEach(rule => {
        const input = document.getElementById(rule.id);
        if (!input) return;

        const showError = () => {
            const value = input.value.trim();
            const isValid = !rule.regex || rule.regex.test(value) || value === '';

            if (!isValid) {
                input.setCustomValidity(rule.message);
                input.reportValidity();
                input.classList.add("validation-error");
                // console.log(`Validation error on ${rule.id}: ${rule.message}`);
            } else {
                input.setCustomValidity('');
                input.classList.remove("validation-error");
            }
        };

        input.addEventListener('input', showError);
        input.addEventListener('blur', showError);
    });
    
    
    // Add small delays to ensure DOM is ready
    setTimeout(() => {
        initializeProviders();
    }, 100);
</script>
</body>
</html>
