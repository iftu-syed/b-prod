<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <link rel="stylesheet" href="<%= basePath %>/blankpage.css">
  <!-- <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'> -->
  <link rel="stylesheet" href="<%= basePath %>/assets/icons/boxicons/css/boxicons.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link href="https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="<%= basePath %>/css/introjs.min.css">
  <style>


    .language-selector {
      text-align: right;
      /* margin: 10px; */
    }

    .language-selector a {
      text-decoration: none;
      margin: 0 10px;
      color: #007BFF;
    }

    .language-selector a.active {
      font-weight: bold;
      text-decoration: underline;
    }
    .language-selector img {
      margin-right: 5px;
      width: 20px;
      margin-left: 5px;
      height: auto;
      vertical-align: bottom;
    }

   
    
    /* tool tip styles */

.introjs-tooltipbuttons {
text-align: right; /* Align buttons to the right */

}

.help-btn {
background-color: #007BFF;
color: white;
border: none;
border-radius: 5px;
padding: 10px 15px;
cursor: pointer;
font-size: 16px;
margin: 0px !important;
transition: background-color 0.3s ease;
}

.help-btn:hover {
background-color: #0056b3; /* Slightly darker blue on hover */
}


.help-button-container {
position: fixed;
bottom: 0;
display: flex;
align-items: center;
justify-content: space-between;
background: #12171e;
padding: 12px 0;
transition: all 0.5s ease;
}

/* Ensure the button aligns well with sidebar's active state */
.sidebar.active .help-btn {
color: #fff;
display: flex;
width: 100%;
gap: 5px;
align-items: center;
text-decoration: none;
border-radius: 0.8rem;
}

/* Container for the dropdown */
#specialityDropdown {
  position: absolute;
  top: 100%; /* Position below the header */
  left: 0;
  background-color: white;
  border: 1px solid #ccc;
  z-index: 10;
width:fit-content;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 5px 0;
  
  /* Initially hidden */
  opacity: 0;
  visibility: hidden;
  
  /* Smooth transition */
  transition: opacity 0.3s ease, visibility 0.3s ease;
}

/* Show the dropdown on hover */
#specialityHeader:hover #specialityDropdown {
  opacity: 1;
  visibility: visible;
}

/* Style the links */
#specialityDropdown a {
  display: block;
  padding: 8px 12px;
  color: #333;
  text-decoration: none;
  transition: background-color 0.2s ease;
}

#specialityDropdown a:hover {
  background-color: #f0f0f0; /* Light gray on hover */
}

.ltr-datetime {
  direction: ltr;
  unicode-bidi: bidi-override;
  text-align: left;
}

#specialityHeader {
  position: relative; /* So the absolutely-positioned dropdown anchors correctly */
  white-space: nowrap; /* (Optional) Keep arrow + text in one line */
  cursor: pointer;     /* (Optional) Makes it clear this is hoverable */
}
/* New Delete Dialog Styles with Unique Class Names */
.delete-confirmation-dialog {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.delete-dialog-content {
    background-color: #ffffff;
    padding: 32px;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    max-width: 450px;
    width: 90%;
    text-align: center;
    position: relative;
    animation: deleteDialogFadeIn 0.3s ease-in-out;
}

@keyframes deleteDialogFadeIn {
    from { opacity: 0; transform: scale(0.9); }
    to { opacity: 1; transform: scale(1); }
}

.delete-warning-icon {
    margin-bottom: 24px;
}

.delete-confirmation-title {
    color: #ff4d4d;
    margin-bottom: 16px;
    font-size: 26px;
    font-weight: 600;
    font-family: 'Arial', sans-serif;
}

.delete-confirmation-message {
    color: #555555;
    margin-bottom: 24px;
    font-size: 16px;
    line-height: 1.6;
    font-family: 'Arial', sans-serif;
}

.delete-dialog-actions {
    display: flex;
    gap: 12px;
    justify-content: center;
    margin-top: 24px;
}

.delete-confirm-button {
    background-color: #dc3545;
    border: none;
    padding: 10px 24px;
    border-radius: 8px;
    color: white;
    font-size: 15px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
}

.delete-confirm-button:hover {
    background-color: #b6323f;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
}

.delete-cancel-button {
    background-color: #CBFCC6;
    border: none;
    padding: 10px 24px;
    border-radius: 8px;
    color: black;
    font-size: 15px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(40, 167, 69, 0.2);
}

.delete-cancel-button:hover {
    background-color: #218838;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
    color: white;
}
.delete-icon {
    color: #ff5c5c;
    font-size: 24px;
}

.delete-button:hover .delete-icon {
    color: #ff0000;
}
</style>
</head>
<body>
  <div class="sidebar">
    <div class="top">
         <div class="logo">
        <img src="<%= basePath %>/assets/images/logo_white.png" alt="WeHealthify">
         </div>
         <i class="bx bx-menu" id="btn"></i>
    </div>

    <br>
    <div class="sidebar-footer">
        <p id="staffLabel" class="bold">Staff</p>
        <p class="bold"><%= doctor.hospitalName %></p><!-- Updated here -->
        <p class="bold"><%= doctor.site_code %></p>   <!-- Updated here -->
    </div>
    <ul>
        <li>
            <a href="<%= basePath %>/home">
                <i class="bx bxs-grid-alt"></i>
                <span class="nav-item" id="dashboardLabel">Dashboard</span>
            </a>
            <span class="tooltip" id="dashboardTooltip">Dashboard</span>
        </li>
        <li>
            <a href="<%= basePath %>/data-entry">
                <i class='bx bx-plus-circle'></i>
                <span class="nav-item" id="addAppointmentLabel">Add Appointment</span>
            </a>
            <span class="tooltip" id="addAppointmentTooltip">Add Appointment</span>
        </li>            
        <li>
            <a href="<%= basePath %>/logout">
                <i class="bx bx-log-out"></i>
                <span class="nav-item" id="logoutLabel">Logout</span>
            </a>
            <span class="tooltip" id="logoutTooltip">Logout</span>
        </li>        
    </ul>

    <div class="help-button-container">
        <button id="helpButton" class="help-btn" >
            <span class="nav-item" id="helpLabel">Help </span>
            <i class='bx bx-help-circle'></i>
        </button>
        
    
    </div>
</div>

<div class="main-content">
    <div class="topbar" dir="<%= lng === 'ar' ? 'rtl' : 'ltr' %>">
        <!-- <h1>Staff Dashboard</h1> -->
        <h2 style="color: #333333;">
          <%= lng === 'ar' 
              ? `مرحباً, ${doctor.firstName} ${doctor.lastName}` 
              : `Welcome, ${doctor.firstName} ${doctor.lastName}` 
          %>
        </h2>
         <!-- Updated here -->
        <a href="<%= basePath %>/data-entry" >
            <button type="submit">
                <i class='bx bx-plus-circle' data-title="Appointment" 
                    data-intro="Create appointment for patient"></i>
                <span id="newAppointmentLabel" class="nav-item">
                    <%= lng === 'ar' ? 'موعد جديد' : 'New Appointment' %>
                </span>
            </button>
          </a>
        
    </div>
     <hr style="opacity: 0.5;">   
     <div class="language-selector" style="text-align: right; padding: 10px; background-color: #f6f5fa;">
        <a href="?lng=en" class="<%= lng === 'en' ? 'active' : '' %>">
            <img src="<%= basePath %>/assets/usa.png" alt="English Flag">English
        </a> |
        <a href="?lng=ar" class="<%= lng === 'ar' ? 'active' : '' %>">
            <img src="<%= basePath %>/assets/flag.png" alt="Arabic Flag">العربية
        </a>
      </div>
        
        <div class="patient-details" style="padding:50px ;">

            <h2 id="patientsCompletionTitle" style="color: #333333;" dir="<%= lng === 'ar' ? 'rtl' : 'ltr' %>">Patients PROMs Completion Status</h2><br>
            
            <div class="table-container" dir="<%= lng === 'ar' ? 'rtl' : 'ltr' %>">
            <table>
              <input type="text" id="patientSearch" placeholder="Quick Search" style="margin-bottom: 30px;padding: 10px;border-radius: 30px;border: 1px solid;" data-title="Search" data-intro="Customizable search for your patients">
              <thead data-title="Manage Patient Data" data-intro="View/Edit patient data">
                <tr>
                  <th style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">MR Number</th>
                  <th id="fullNameHeader" style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">Full Name</th>
                  <th id="specialityHeader">
                    <span id="specialityHeaderText">Specialty</span>
                    <span id="specialityArrow">&#x25BC;</span>
                    <div id="specialityDropdown">
                      <ul id="specialityList"></ul>
                    </div>
                  </th>          
                  <th id="phoneNumberHeader" style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">Phone Number</th>
                  <th id="appointmentHeader" style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">Appointment</th>
                  <th id="statusHeader" style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">Status</th>
                  <th id="actionHeader" data-title="Reminder" data-intro="Send reminder to patient to complete surveys" style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">Action</th>
                  <th id="editHeader" data-title="Edit Patient" data-intro="Edit patient data" style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">Edit/Delete</th>
                </tr>
              </thead>
              <tbody>
                <% 
                const today = new Date();
                const todayAppointments = [];
                const futureAppointments = [];
                const pastAppointments = [];
                patients.forEach(function(patient) {
                    const appointmentDate = new Date(patient.datetime);                        
                    if (appointmentDate.toDateString() === today.toDateString()) {
                        todayAppointments.push(patient); // Today's appointment
                    } else if (appointmentDate > today) {
                        futureAppointments.push(patient); // Future appointment
                    } else {
                        pastAppointments.push(patient); // Past appointment
                    }
                });
                todayAppointments.sort((a, b) => new Date(a.datetime) - new Date(b.datetime));
                futureAppointments.sort((a, b) => new Date(b.datetime) - new Date(a.datetime));
                pastAppointments.sort((a, b) => new Date(b.datetime) - new Date(a.datetime));
                const sortedPatients = todayAppointments.concat(futureAppointments, pastAppointments);
                sortedPatients.forEach(function(patient) {
                    const appointmentDate = new Date(patient.datetime);
                    const isToday = appointmentDate.toDateString() === today.toDateString();
                    const isFuture = appointmentDate > today;  // Future appointments
            %>
                    <tr>
                        <td style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;"><%= patient.Mr_no %></td>
                        <td style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">
                            <%= patient.firstName %>
                            <%= patient.lastName %>
                        </td>
                        
                        <td style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;"><%= patient.speciality %></td>
                        <td style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;"><%= patient.phoneNumber %></td>
                        <td style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">
                          <span class="ltr-datetime" style="background-color: <%= isToday ? '#eed076' : '' %>; color: black; padding: 5px; border-radius: 5px;">
                            <%= patient.datetime %>
                          </span>
                        </td>
                        
                        <td style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;"><span style="background-color: <%= patient.surveyStatus === 'Completed' ? '#CBFCC6' : '#FF7F7F' %>; color: black; padding: 5px; border-radius: 5px;">
                            <%= patient.surveyStatus %>
                        </span></td>
                        <td style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">
                            <form action="<%= basePath %>/send-reminder" method="POST">
                              <input type="hidden" name="Mr_no" value="<%= patient.Mr_no %>"> 
                              <button type="submit" id="sendReminderButton"
                                <%= ['none', 'third_party_api'].includes(notificationPreference) ? 'disabled' : '' %>
                                style="background-color: <%= ['none', 'third_party_api'].includes(notificationPreference) ? '#ccc' : '#b2f2bb' %>;
                                       color: <%= ['none', 'third_party_api'].includes(notificationPreference) ? '#666' : 'black' %>;
                                       border: none;
                                       padding: 5px 10px;
                                       border-radius: 5px;
                                       cursor: <%= ['none', 'third_party_api'].includes(notificationPreference) ? 'not-allowed' : 'pointer' %>;">
                                <i class='bx bxs-envelope' style='font-size:14px;'></i>
                                <%= lng === 'ar' ? 'إرسال تذكير' : 'Send Reminder' %>
                              </button>
                            </form>
                          </td>
                        <td style="text-align: <%= lng === 'ar' ? 'right' : 'left' %>;">
                          <!-- Edit icon -->
                          <a href="<%= basePath %>/edit-appointment?Mr_no=<%= patient.hashedMrNo %>" title="Edit"><span class="material-symbols-outlined" style="color: #7079f8; margin-right: 8px;">edit</span></a>
                          <form id="deleteForm-<%= patient.Mr_no %>" action="<%= basePath %>/delete-appointment" method="POST" style="display:inline;">
                            <input type="hidden" name="Mr_no" value="<%= patient.Mr_no %>">
                            <button type="button" style="border: none;" onclick="confirmDelete('<%= patient.Mr_no %>')" class="delete-button" title="Delete">
                                <span class="material-symbols-outlined delete-icon">delete</span>
                            </button>
                        </form>                 
                        </td>
                        
                    </tr>
                <% }); %>
              </tbody>
            </table>
           </div> 
           <script>
            // Toggle the dropdown visibility when the arrow is clicked
            // document.getElementById('specialityArrow').addEventListener('click', function() {
            //   var dropdown = document.getElementById('specialityDropdown');
            //   dropdown.style.display = (dropdown.style.display === 'block') ? 'none' : 'block';
            // });
          
            // Function to extract unique specialities and populate the dropdown
            function populateSpecialityDropdown() {
  var specialitySet = new Set(); // To store unique specialities
  var rows = document.querySelectorAll("table tbody tr");

  // Loop through each row and add the speciality to the set
  rows.forEach(function(row) {
    var specialityCell = row.cells[2]; // Assuming speciality column is at index 2 (0-based)
    var specialityText = specialityCell.textContent.trim();
    if (specialityText) {
      specialitySet.add(specialityText);
    }
  });

  // Get the speciality dropdown list
  var specialityList = document.getElementById("specialityList");

  // Clear the existing list before adding new options
  specialityList.innerHTML = '';

  // Add "All" option
  var allOption = document.createElement("li");
  allOption.innerHTML = '<a href="#" onclick="filterSpeciality(\'\')">All</a>';
  specialityList.appendChild(allOption);

  // Loop through the set and create an option for each speciality
  specialitySet.forEach(function(speciality) {
    var listItem = document.createElement("li");
    listItem.innerHTML = '<a href="#" onclick="filterSpeciality(\'' + speciality + '\')">' + speciality + '</a>';
    specialityList.appendChild(listItem);
  });
}

// Function to filter the table based on selected speciality
function filterSpeciality(speciality) {
  var rows = document.querySelectorAll("table tbody tr");

  rows.forEach(function(row) {
    // Assuming speciality column is at index 2 (0-based)
    var specialityColumnIndex = 2;
    var specialityCell = row.cells[specialityColumnIndex];
    var specialityText = specialityCell.textContent.trim(); // Get the text and trim any extra spaces

    // If the selected speciality is 'All', show all rows
    if (speciality === '' || specialityText.toLowerCase() === speciality.toLowerCase()) {
      row.style.display = ""; // Show row
    } else {
      row.style.display = "none"; // Hide row
    }
  });

  // No need to manually hide the dropdown since it's handled by CSS hover
}

// Call the populateSpecialityDropdown function after the page loads to auto-populate the dropdown
window.onload = function() {
  populateSpecialityDropdown();
};  
          </script>
          
          
          
          
</div>
</div>

<!-- Loading GIF -->
<div class="loading-container" id="loadingContainer">
  <img src="<%= basePath %>/assets/photo.GIF" alt="Loading...">
</div>

<div id="confirmDeleteDialog" class="delete-confirmation-dialog" style="display: none;">
  <div class="delete-dialog-content">
      <div class="delete-warning-icon">
          <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#ff4d4d" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
      </div>
      <h2 class="delete-confirmation-title">Confirm Delete</h2>
      <p id="confirmDeleteMessage" class="delete-confirmation-message">Are you sure you want to delete this patient record?</p>
      <div class="delete-dialog-actions">
        <button id="cancelDeleteBtn" class="delete-cancel-button">Cancel</button>
          <button id="confirmDeleteBtn" class="delete-confirm-button">Delete</button>
      </div>
  </div>
</div>

</body>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const getCookie = (name) => {
const value = `; ${document.cookie}`;
const parts = value.split(`; ${name}=`);
if (parts.length === 2) return parts.pop().split(';').shift();
};
const params = new URLSearchParams(window.location.search);
let currentLanguage = params.get('lng') || getCookie('lng') || 'en';

// Set the language cookie
document.cookie = `lng=${currentLanguage}; path=/`;
      const fetchUrl = `/stafflogin/locales/${currentLanguage}/translation.json`;

  
      // Set the `lang` and `dir` attributes for the HTML document
     
  
      fetch(fetchUrl)
        .then(response => {
          if (!response.ok) {
            console.warn(`Translation file not found for language: ${currentLanguage}. Falling back to English.`);
            return fetch(`/stafflogin/locales/en/translation.json`);
          }
          return response.json();
        })
        .then(translations => {
          console.log('Loaded translations:', translations);
  
          // Update the elements based on translation keys
          Object.keys(translations).forEach(id => {
            const element = document.getElementById(id);
  
            if (element) {
                const translationValue = translations[id];

                if (typeof translationValue === 'string') {
                    // Update regular text or HTML content
                    element.innerHTML = translationValue;
                }
                  if (element.tagName === "INPUT" || element.tagName === "TEXTAREA") {

                    // Update placeholders for input elements

                    console.log(`Updating placeholder for ${id}:`, translationValue);

                    element.placeholder = translationValue;

                  }
                else if (typeof translationValue === 'object') {
                                        // Handle nested object (e.g., lists)
                                        element.innerHTML = ''; // Clear existing content
                                        Object.values(translationValue).forEach(item => {
                                            const listItem = document.createElement('li');
                                            listItem.textContent = item;
                                            element.appendChild(listItem);
                                        });
                } else {
                    console.warn(`Unexpected translation value type for "${id}":`, translationValue);
                }
            }
          });
        })
        .catch(error => console.error('Error loading translations:', error));
    });
  </script>
<script>
let btn = document.querySelector('#btn');
let sidebar = document.querySelector('.sidebar');

btn.onclick = function() {
    sidebar.classList.toggle('active');
};

// Show the loading GIF when the form is submitted
document.querySelectorAll('form').forEach(form => {
    form.addEventListener('submit', function() {
        document.getElementById('loadingContainer').style.display = 'flex';
    });
});

const searchInput = document.getElementById('patientSearch');
const tableBody = document.querySelector('tbody');
searchInput.addEventListener('keyup', function() {
    const filterQuery = searchInput.value.toLowerCase();
    const tableRows = tableBody.querySelectorAll('tr');

    for (const row of tableRows) {
        const mrNumberCell = row.querySelector('td:nth-child(1)'); 
        const nameCell = row.querySelector('td:nth-child(2)'); 
        const phoneNumberCell = row.querySelector('td:nth-child(4)');

        let textToMatch = mrNumberCell.textContent.toLowerCase() + " " + nameCell.textContent.toLowerCase() + " " + phoneNumberCell.textContent.toLowerCase();

        if (textToMatch.indexOf(filterQuery) !== -1) {
            row.style.display = ''; // Show row if it matches the filter
        } else {
            row.style.display = 'none'; // Hide row if it doesn't match
        }
    }
});


</script>

<script src="<%= basePath %>/js/intro.min.js"></script>
    <script>
        document.getElementById('helpButton').addEventListener('click', function () {
    // Determine the current language (default to English)
    const lang = new URLSearchParams(window.location.search).get('lng') || getCookie('lng') || 'en';

    // Define translations for the steps
    const translations = {
        en: {
            step1: "Create an appointment for a patient.",
            step2: "Customizable search for your patients.",
            step3: "View and manage patient data.",
            step4: "Send a reminder to the patient to complete surveys.",
            step5: "Edit patient data."
        },
        ar: {
            step1: "إنشاء موعد للمريض.",
            step2: "بحث قابل للتخصيص عن مرضاك.",
            step3: "عرض وإدارة بيانات المريض.",
            step4: "إرسال تذكير للمريض لإكمال الاستبيانات.",
            step5: "تحرير بيانات المريض."
        }
    };

    // Define the steps for Intro.js
    const introSteps = [
        {
            element: 'button[type="submit"]', // Button to create an appointment
            intro: translations[lang].step1
        },
        {
            element: '#patientSearch', // Patient search input field
            intro: translations[lang].step2
        },
        {
            element: 'thead', // Patient data table header
            intro: translations[lang].step3
        },
        {
            element: '#actionHeader', // Reminder action
            intro: translations[lang].step4
        },
        {
            element: '#editHeader', // Edit patient data action
            intro: translations[lang].step5
        }
    ];

    // Initialize and start Intro.js with dynamic labels for buttons
    introJs()
        .setOptions({
            steps: introSteps,
            rtl: lang === 'ar', // Enable RTL if the language is Arabic
            nextLabel: lang === 'ar' ? 'التالي' : 'Next',
            prevLabel: lang === 'ar' ? 'السابق' : 'Back',
            doneLabel: lang === 'ar' ? 'تم' : 'Done'
        })
        .start();
});

// Helper function to retrieve a cookie value by name
function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
}

        
    </script>
    <script>
        document.getElementById('lastStepButton').addEventListener('click', function () {
            introJs().setOptions({
                steps: [
                    {
                        element: '#help-btn',
                        intro: 'You can view the steps again you if wish you by clicking here.',
                        title: 'View Steps Again'
                    }
                ]
            }).start();
        });
    </script>
    
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const sidebarLinks = document.querySelectorAll('.sidebar ul li a');
  
    function removeCurrentPageClasses() {
        sidebarLinks.forEach(link => {
            link.classList.remove('CurrentPage');
        });
    }
  
    function setCurrentPageLink(path) {
        removeCurrentPageClasses();
        console.log(`Setting CurrentPage link for path: ${path}`);
        const currentPageLink = Array.from(sidebarLinks).find(link => {
            const linkPath = new URL(link.href).pathname;
            return linkPath === path;
        });
        if (currentPageLink) {
            console.log(`CurrentPage link found: ${currentPageLink.href}`);
            currentPageLink.classList.add('CurrentPage');
        } else {
            console.log(`No CurrentPage link found for path: ${path}`);
        }
    }
  
    // Check the URL path and set the current page link on page load
    const currentPath = window.location.pathname;
    console.log(`Current path: ${currentPath}`);
    setCurrentPageLink(currentPath);
  
    sidebarLinks.forEach(link => {
        link.addEventListener('click', function() {
            const targetPath = new URL(link.href).pathname;
            console.log(`Navigating to: ${targetPath}`);
            setCurrentPageLink(targetPath);
        });
    });
  });
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
        const cooldownSeconds = 60;
    
        document.querySelectorAll("form[action$='/send-reminder']").forEach(form => {
            const button = form.querySelector("button");
            const mrNo = form.querySelector("input[name='Mr_no']").value;
            const key = `sendReminderCooldown-${mrNo}`;
    
            const lastClick = localStorage.getItem(key);
            if (lastClick) {
                const elapsed = (Date.now() - parseInt(lastClick)) / 1000;
                if (elapsed < cooldownSeconds) {
                    disableButton(button, cooldownSeconds - elapsed);
                }
            }
    
            form.addEventListener("submit", function (e) {
                if (button.disabled) {
                    e.preventDefault(); // Prevent sending if still in cooldown
                } else {
                    localStorage.setItem(key, Date.now());
                    disableButton(button, cooldownSeconds);
                }
            });
    
            function disableButton(btn, seconds) {
                btn.disabled = true;
                const originalHTML = btn.innerHTML;
    
                const interval = setInterval(() => {
                    seconds = Math.ceil(seconds - 1);
                    if (seconds <= 0) {
                        btn.disabled = false;
                        btn.innerHTML = originalHTML;
                        clearInterval(interval);
                    } else {
                        btn.textContent = `Wait ${seconds}s`;
                    }
                }, 1000);
            }
        });
    });
    </script>

  <script>
    let currentMrNoToDelete = null;
    
    function confirmDelete(mrNo) {
    currentMrNoToDelete = mrNo;
    const dialog = document.getElementById('confirmDeleteDialog');
    const message = document.getElementById('confirmDeleteMessage');
    const confirmBtn = document.getElementById('confirmDeleteBtn');
    const cancelBtn = document.getElementById('cancelDeleteBtn');
    
    message.textContent = `Are you sure you want to delete patient with MR No. ${mrNo}?`;
    dialog.style.display = 'flex';
    
    confirmBtn.onclick = () => {
        dialog.style.display = 'none';
        const form = document.getElementById(`deleteForm-${currentMrNoToDelete}`);
        
        // Ensure the form is submitted properly
        form.submit();
    };
    
    cancelBtn.onclick = () => {
        dialog.style.display = 'none';
        currentMrNoToDelete = null;
    };
    
    // Close dialog when clicking outside
    dialog.onclick = (event) => {
        if (event.target === dialog) {
            dialog.style.display = 'none';
            currentMrNoToDelete = null;
        }
    };
}
    </script>
</html>