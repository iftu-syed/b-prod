<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Details</title>
    <link rel="stylesheet" href="styles.css">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .chart {
      margin: 20px; /* Add margin around each chart */
    }
    .line {
        fill: none;
        stroke: #8a8a8a;
        stroke-width: 2.5px;
    }
    .axis-label, .annotation {
        font-family: 'Roboto', sans-serif;
        font-size: 12px;
    }
    .highlight-circle {
        stroke: #4682b4;
        stroke-width: 2.5px;
    }
    .data-circle {
        fill: #ffffff;
        stroke: #8a8a8a;
        stroke-width: 2.5px;
    }

    .grid-line {
        stroke: #ddd;
        stroke-width: 1px;
    }
        /* body{
            overflow: hidden;
        } */
        .user-details-container {
            max-width: 100%;
            margin-left: 250px;
            padding: 20px;
            background-color: #ffffff;
        }
        h2 {
            color: #333333;
            text-align: left;
            margin-bottom: 20px;
        }
        p {
            font-size: 16px;
            margin-bottom: 10px;
        }
        .image-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            justify-items: center;
        }
        .image {
            position: relative;
            width: 100%;
            max-width: 300px;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            text-align: center;
        }
        .image:hover {
            transform: scale(1.05);
        }
        .image img {
            width: 100%;
            height: auto;
            vertical-align: middle;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            padding-top: 50px;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.9);
        }
        .modal-content {
            margin: auto;
            display: block;
            width: 80%;
            max-width: 700px;
        }
        .modal-content img {
            width: 100%;
            height: auto;
        }
        .close {
            position: absolute;
            top: 15px;
            right: 35px;
            color: #f1f1f1;
            font-size: 40px;
            font-weight: bold;
            transition: 0.3s;
            cursor: pointer;
        }
        .close:hover,
        .close:focus {
            color: #bbb;
            text-decoration: none;
            cursor: pointer;
        }
        form button[type="submit"] {
            display: block;
            width: 100%;
            padding: 10px;
            color: #ffffff;
            border: 0.5px solid #000;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
        }
        form button[type="submit"]:hover {
            background-color: #c82333;
        }
        
        input[type="text"], input[type="password"], button {
            margin-bottom: 0px;
        }

        .sidebar{
            box-sizing: border-box;
            position: absolute;
            width: 250px;
            height: 100%;
            top: 10vh;
            left: 0px;
            bottom: 0px;
            border-right: 1px solid #333;
        }

        .rowtop {
            display: flex;
            justify-content: space-between;
            border-bottom: 1px solid #333333;
            height: 10vh;
        }

        .columntop1 {
            padding-top:20px;
            padding-right: 20px;
            align-content: center;
        }
        
        .nav {
            justify-content: space-between;
        }

        .columntop {
            width: 249px;
            border-right: 1px solid #333333;
        }

        .columntop h1 {
            margin-left: 20px;
        }
        .columntop p {
            margin-left: 20px;
        }
        .row {
            display: flex;
        }

        .column {
            flex: 50%;
        }

        .sidebar ul{
            background-color:#CBFCC6;
            padding:10px;
            margin:20px;
            text-align: left;
        }

        .promslist ul {
            line-height: 1.8;
        }

      
    .chart-iframe {
    width: 100%;
    height: calc(100vh - 20px); /* Adjust this value as needed */
    border: none;
    overflow: hidden; /* Hide any overflowing content */
}


    .image-container {
        display: flex;
        flex-wrap: wrap;
        /* justify-content: space-between; */
        justify-content: space-evenly;
    }
    .charts-grid {
        display: grid;
        grid-template-columns: 1fr; /* Single column by default */
        gap: 20px; /* Space between charts */
    }

    @media (min-width: 600px) {
        .charts-grid {
            grid-template-columns: 1fr 1fr; /* Two columns for larger screens */
        }
    }


    .chart-container {
        width: 100%;
        border-radius: 10px; /* Add rounded corners */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add shadow for depth */
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* Smooth hover transition */
    }

    .chart-container:hover {
        transform: scale(1.05); /* Slightly enlarge the chart on hover */
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Enhance shadow on hover */
    }

    .image {
        width: 100%;
        cursor: pointer;
    }

    .image img {
        width: 100%;
        height: auto;
    }

    .speciality-container {
        margin-bottom: 40px;
        margin-top: -18px;
        
    }
    /* .tooltip {
    position: absolute;
    text-align: center;
    width: 25px;
    height: 18px;
    padding: 2px;
    font: 12px sans-serif;
    background: lightsteelblue;
    border: 0px;
    border-radius: 8px;
    pointer-events: none;
} */
.tooltip {
    position: absolute;
    text-align: left;
    width: auto;
    height: auto;
    padding: 10px;
    font: 12px sans-serif;
    background: lightsteelblue;
    border: 1px solid #333;
    border-radius: 8px;
    pointer-events: none;
    color: black;
}

        

    </style>
</head>
<body style="background-color: #fff;">
<nav>
    <div class="rowtop">
        <div class="columntop">
            <!-- <h1>WeHealthify</h1> -->
             <img src="assets/images/logo.png" alt="">
        </div>
        
        <div class="columntop1">
            <h1><strong>Hello, </strong> <%= user.Name %></h1>
        </div>
            
        <div class="columntop1">
            <form action="/logout" method="POST">
            <button type="submit"><i class='bx bx-log-out' > Logout</i> </button>
            </form>
            <br><br><br>

             <!-- New Button to Open Server -->
             <!-- <button onclick="openServer()">API Serve Answering</button> -->
              
             <button onclick="openServer()">API test</button>

             <!-- Add this button within the user-details-container div -->
<!-- Add this button within the user-details-container div -->
<div>
    <form action="/survey-details/<%= user.Mr_no %>" method="get">
        <button type="submit">Show Survey Details</button>
    </form>
</div>


        </div>
    </div>
</nav>

<div class="sidebar">
    <ul>
        <!-- <i class='bx bxs-dashboard'> Dashboard</i> -->
        <p>Medical Record # : <%=user.Mr_no %></p>

    </ul>
</div>
        
<div class="user-details-container">
    <div class="speciality-container">
        <h2 class="speciality-title">Your Survey Responses</h2>
        <div id="charts-container" class="charts-grid">
            <!-- Each chart will be appended here by D3 -->
        </div>
    </div>
</div>





</div>

<!-- The Modal -->
<div id="myModal" class="modal">
    <span class="close" onclick="closeModal()">&times;</span>
    <div class="modal-content">
        <img id="modalImage" src="" alt="Enlarged Image">
    </div>
</div>
</body>
<script>
function openModal(imageSrc, type, mr_no) {
    const modal = document.getElementById('myModal');
    const modalImage = document.getElementById('modalImage');
    modalImage.src = imageSrc;
    modal.style.display = 'block';

    const iframe = document.getElementById(`iframe-${type}`);
    iframe.src = `/chart?type=${type}&mr_no=${mr_no}`;
}

function closeModal() {
    const modal = document.getElementById('myModal');
    modal.style.display = 'none';
}

window.onclick = function(event) {
    const modal = document.getElementById('myModal');
    if (event.target == modal) {
        modal.style.display = 'none';
    }
}

function openServer() {
    const mr_no = "<%= user.Mr_no %>";
    window.open(`http://localhost:8080?mr_no=${mr_no}`, '_blank');
}

window.addEventListener('load', function() {
    const iframes = document.querySelectorAll('.chart-iframe');
    iframes.forEach(iframe => {
        iframe.onload = () => resizeIframe(iframe);
    });
});


</script>

<script>
    function loadData(csvPath, callback) {
        d3.csv(csvPath).then(data => {
            console.log("Data loaded:", data); // Debugging line
            data.forEach(d => {
                d.months = +d.months_since_baseline;
                d.score = +d.score;
                d.ymax = +d.ymax;
                d.ymin = +d.ymin;
            });
            callback(data);
        }).catch(error => console.error("Error loading data:", error)); // Error handling
    }

    function loadSeverityLevels(csvPath, scale, callback) {
        d3.csv(csvPath).then(data => {
            const severityLevels = data
                .filter(d => d.Scale === scale)
                .map(d => ({
                    level: d.Severity,
                    color: d.Color,
                    range: [+d.Chart_Range_Min, +d.Chart_Range_Max]
                }));
            console.log("Severity levels loaded:", severityLevels); // Debugging line
            callback(severityLevels);
        }).catch(error => console.error("Error loading severity levels:", error)); // Error handling
    }

    function createScales(data, width, height) {
        const x = d3.scaleLinear()
            .domain([d3.min(data, d => d.months), d3.max(data, d => d.months)])
            .range([0, width]);

        const y = d3.scaleLinear()
            .domain([+data[0].ymin, +data[0].ymax])
            .range([height, 0]);

        return { x, y };
    }

    function drawAxes(svg, x, y, width, height) {
        svg.append("g")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(x))
            .selectAll("text")
            .style("fill", "#777");

        svg.append("g")
            .call(d3.axisLeft(y))
            .selectAll("text")
            .style("fill", "#777");
    }

    function drawSeverityGridLines(svg, y, width, severityLevels) {
        severityLevels.forEach(severity => {
            svg.append("line")
                .attr("class", "grid-line")
                .attr("x1", 0)
                .attr("x2", width)
                .attr("y1", y(severity.range[0]))
                .attr("y2", y(severity.range[0]));

            svg.append("line")
                .attr("class", "grid-line")
                .attr("x1", 0)
                .attr("x2", width)
                .attr("y1", y(severity.range[1]))
                .attr("y2", y(severity.range[1]));
        });
    }

    function drawSeverityLabels(svg, y, width, margin, severityLevels) {
        severityLevels.forEach(severity => {
            svg.append("rect")
                .attr("x", width + margin.right - 100)
                .attr("y", y(severity.range[1]))
                .attr("width", 6)
                .attr("height", y(severity.range[0]) - y(severity.range[1]))
                .attr("fill", severity.color);

            svg.append("text")
                .attr("x", width + margin.right - 85)
                .attr("y", (y(severity.range[0]) + y(severity.range[1])) / 2)
                .attr("dy", ".35em")
                .attr("text-anchor", "start")
                .attr("class", "axis-label")
                .text(severity.level);
        });
    }

    const scoreInterpretation = {
        "PROMIS-10 Physical": "higher",
        "PROMIS-10 Mental": "higher",
        "WEXNER": "lower",
        "ICIQ-UI SF": "lower",
        "PAID": "lower",
        "EPDS": "lower",
        "PROMIS Bank v1.1 - Pain Interference": "lower"
    };

    function drawLineAndPoints(svg, data, x, y, line, severityLevels) {
        const tooltip = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);

        svg.append("path")
            .datum(data)
            .attr("class", "line")
            .attr("d", line);

        // Function to format the date
        function formatDate(dateStr) {
            const date = new Date(dateStr);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
            const year = date.getFullYear();
            return `${month}/${day}/${year}`;
        }

        data.forEach(d => {
            const circle = svg.append("circle")
                .attr("class", "data-circle")
                .attr("cx", x(d.months))
                .attr("cy", y(d.score))
                .attr("r", 4);

            // Determine the severity color
            let severityColor = "lightsteelblue";
            severityLevels.forEach(severity => {
                if (d.score >= severity.range[0] && d.score <= severity.range[1]) {
                    severityColor = severity.color;
                }
            });

            // Add hover functionality
            circle.on("mouseover", (event) => {
                tooltip.transition().duration(200).style("opacity", .9);
                tooltip.html(`<strong>Date:</strong> ${formatDate(d.date)}<br><strong>Score:</strong> ${d.score}`)
                    .style("left", (event.pageX + 15) + "px")
                    .style("top", (event.pageY - 28) + "px")
                    .style("background", severityColor);
            }).on("mouseout", () => {
                tooltip.transition().duration(500).style("opacity", 0);
            });
        });

        const lastDataPoint = data[data.length - 1];

        svg.append("circle")
            .attr("class", "highlight-circle")
            .attr("cx", x(lastDataPoint.months))
            .attr("cy", y(lastDataPoint.score))
            .attr("r", 8)
            .attr("fill", severityLevels.find(severity => lastDataPoint.score >= severity.range[0] && lastDataPoint.score <= severity.range[1]).color);

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", x(lastDataPoint.months) + 10)
            .attr("y", y(lastDataPoint.score))
            .text(lastDataPoint.score);
    }

    function drawAnnotations(svg, data, margin, width, height, traceName) {
        const scoreType = scoreInterpretation[traceName];
        const changeFromFirstVisit = Math.round((data[data.length - 1].score - data[0].score) * 100) / 100;
        const changeFromLastVisit = Math.round((data[data.length - 1].score - data[data.length - 2].score) * 100) / 100;

        const getAnnotationText = (change, type, isFirstVisit) => {
            if (type === "higher") {
                return change > 0 ? `↑ ${change} from ${isFirstVisit ? "first" : "last"} visit` : `↓ ${Math.abs(change)} from ${isFirstVisit ? "first" : "last"} visit`;
            } else {
                return change < 0 ? `↑ ${Math.abs(change)} from ${isFirstVisit ? "first" : "last"} visit` : `↓ ${change} from ${isFirstVisit ? "first" : "last"} visit`;
            }
        };

        const getColor = (change, type) => {
            if (type === "higher") {
                return change > 0 ? "green" : "red";
            } else {
                return change < 0 ? "green" : "red";
            }
        };

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", margin.left / 2)
            .attr("y", -margin.top / 2.5)
            .text(getAnnotationText(changeFromFirstVisit, scoreType, true))
            .style("fill", getColor(changeFromFirstVisit, scoreType));

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", margin.left / 2)
            .attr("y", -margin.top / 2 + 25)
            .text(getAnnotationText(changeFromLastVisit, scoreType, false))
            .style("fill", getColor(changeFromLastVisit, scoreType));
    }

    function drawTitleAndLabels(svg, title, margin, width, height) {
        const xAxisLabel = "Months Since Baseline";

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", width / 2)
            .attr("y", height + margin.bottom - 10)
            .attr("text-anchor", "middle")
            .text(xAxisLabel);

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", width / 2)
            .attr("y", -margin.top + 30)
            .attr("text-anchor", "middle")
            .style("font-size", "18px")
            .text(title);
    }

    function drawChart(data, severityCsvPath, traceName, title) {
        const margin = { top: 80, right: 150, bottom: 50, left: 50 };
        const width = 600 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const chartContainer = d3.select("#charts-container")
            .append("div")
            .attr("class", "chart-container");

        const svg = chartContainer.append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        const filteredData = data.filter(d => d.trace_name === traceName);
        loadSeverityLevels(severityCsvPath, traceName, severityLevels => {
            const { x, y } = createScales(filteredData, width, height);
            const line = d3.line()
                .x(d => x(d.months))
                .y(d => y(d.score))
                .curve(d3.curveCardinal);

            drawAxes(svg, x, y, width, height);
            drawSeverityGridLines(svg, y, width, severityLevels);
            drawSeverityLabels(svg, y, width, margin, severityLevels);

            // Always draw title and labels
            drawTitleAndLabels(svg, title, margin, width, height);

            if (filteredData.length > 0) {
                drawLineAndPoints(svg, filteredData, x, y, line, severityLevels);
                drawAnnotations(svg, filteredData, margin, width, height, traceName);
            }
        });
    }

    // Load data and draw charts for patient_health_scores CSV
    loadData("<%= csvPath %>", data => {
        console.log("Unique trace names:", [...new Set(data.map(d => d.trace_name))]); // Debugging line
        const uniqueTraceNames = [...new Set(data.map(d => d.trace_name))];
        uniqueTraceNames.forEach(traceName => {
            const title = data.find(d => d.trace_name === traceName).title || traceName;
            drawChart(data, "SeverityLevels.csv", traceName, title);
        });
    });

    // Load data and draw charts for pain interference CSV
    loadData("<%= painCsvPath %>", data => {
        console.log("Unique trace names:", [...new Set(data.map(d => d.trace_name))]); // Debugging line
        const uniqueTraceNames = [...new Set(data.map(d => d.trace_name))];
        uniqueTraceNames.forEach(traceName => {
            const title = data.find(d => d.trace_name === traceName).title || traceName;
            drawChart(data, "SeverityLevels.csv", traceName, title);
        });
    });
</script>




</html>
