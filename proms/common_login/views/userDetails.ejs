<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Details</title>
    <link rel="stylesheet" href="/styles.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>


ai-message-container {
    display: flex;
    justify-content: center; /* Center the message horizontally /
    width: 100%; / Ensure the message box is centered within its container /
    margin-bottom: 20px; / Add some space below the message box */

}

.ai-message-box {
    background-color: #E6E5EB;
    padding: 10px;
    border-radius: 8px;
    width: auto; /* Adjust width as needed /
    text-align: center; / Center the text within the box */
}

.ai-icon-container {
    display: none; /* This will completely remove the AI icon from the layout */
}
.ai-message-box h3 {
    display: none;

}

h2.speciality-title {
    font-style: italic;
    width: 80%;
    margin: auto;
    font-weight: 400;
}


        .chart {
      margin: 20px; /* Add margin around each chart */
    }
    .line {
        fill: none;
        stroke: #8a8a8a;
        stroke-width: 2.5px;
    }
    .axis-label, .annotation {
        font-family: 'Roboto', sans-serif;
        font-size: 12px;
    }
    .highlight-circle {
        stroke: #4682b4;
        stroke-width: 2.5px;
    }
    .data-circle {
        fill: #ffffff;
        stroke: #8a8a8a;
        stroke-width: 2.5px;
    }
/* BREATHING EFFECT TO CIRCLES */
@keyframes breathing {
    0% {
        transform: scale(1);
        opacity: 1;
    }
    50% {
        transform: scale(1.2);
        opacity: 0.7;
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}

.highlight-circle {
    transform-box: fill-box;
    transform-origin: center;
    animation: breathing 2s infinite ease-in-out;
}


/* END OF BREATHIGN EFFECT CSS */

    .grid-line {
        stroke: #ddd;
        stroke-width: 1px;
    }
        /* body{
            overflow: hidden;
        } */
        .user-details-container {
            max-width: 100%;

            padding: 20px;
            background-color: #E6E5EB;
        }
        h2 {
            color: #333333;
            text-align: center;
            margin-bottom: 20px;
            margin-top:20px
        }
        p {
            font-size: 16px;
            margin-bottom: 10px;
        }
        .image-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            justify-items: center;
        }
        .image {
            position: relative;
            width: 100%;
            max-width: 300px;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            text-align: center;
        }
        .image:hover {
            transform: scale(1.05);
        }
        .image img {
            width: 100%;
            height: auto;
            vertical-align: middle;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            padding-top: 50px;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.9);
        }
        .modal-content {
            margin: auto;
            display: block;
            width: 80%;
            max-width: 700px;
        }
        .modal-content img {
            width: 100%;
            height: auto;
        }
        .close {
            position: absolute;
            top: 15px;
            right: 35px;
            color: #f1f1f1;
            font-size: 40px;
            font-weight: bold;
            transition: 0.3s;
            cursor: pointer;
        }
        .close:hover,
        .close:focus {
            color: #bbb;
            text-decoration: none;
            cursor: pointer;
        }
        form button[type="submit"] {
            display: block;
            width: 100%;
            padding: 10px;
            color: #ffffff;
            border: 0.5px solid #000;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
        }
        form button[type="submit"]:hover {
            background-color: #c82333;
        }
        
        input[type="text"], input[type="password"], button {
            margin-bottom: 0px;
        }


        
    .chart-iframe {
    width: 100%;
    height: calc(100vh - 20px); /* Adjust this value as needed */
    border: none;
    overflow: hidden; /* Hide any overflowing content */
}


    .image-container {
        display: flex;
        flex-wrap: wrap;
        /* justify-content: space-between; */
        justify-content: space-evenly;
    }
    .charts-grid {
        display: grid;
        grid-template-columns: 1fr; /* Single column by default */
        gap: 50px; /* Space between charts */
        justify-items: center;
    }

    @media (min-width: 600px) {
        .charts-grid {
            grid-template-columns: 1fr 1fr; /* Two columns for larger screens */
        }
    }


    .chart-container {
        width: 600px;
        /* border-radius: 10px; Add rounded corners */
        box-shadow: -11px -8px 20px 1px rgba(0, 0, 0, 0.1); /* Add shadow for depth */
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* Smooth hover transition */
        border-radius: 15px;
    }

    .chart-container:hover {
        transform: scale(1.01); /* Slightly enlarge the chart on hover */
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); /* Add shadow for depth */
    }

    .image {
        width: 100%;
        cursor: pointer;
    }

    .image img {
        width: 100%;
        height: auto;
    }

    .speciality-container {
        margin-bottom: 40px;
        margin-top: -18px;
        
    }



.tooltip {
    position: absolute;
    text-align: left;
    width: auto;
    height: auto;
    padding: 10px;
    font: 12px sans-serif;
    background: lightsteelblue;
    border-radius: 8px;
    pointer-events: none;
    color: black;
    z-index: 3000;
}
svg {
    BACKGROUND-COLOR: #fff;
    BORDER-RADIUS: 15PX;
}
#language-switch-btn {
    background-color: #CBFCC6; /* Green background */
    border: none;
    border-radius: 8px;
    color: rgb(0, 0, 0); /* White text color */
    padding: 12px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
    transition-duration: 0.4s;
    font-family: 'Urbanist', sans-serif; /* Ensure the font matches your theme */
    width: 100%; /* Full width */
    max-width: 300px; /* Adjust max width as needed */
}

/* #language-switch-btn:hover {
    background-color: white; 
    color: black; 
    border: 2px solid #28a745;
} */

.language-switch {
    text-align: right;
    margin-right: 20px;
}


        

    </style>
</head>
<body style="background-color: #fff;">

    <div class="sidebar">
        <div class="top">
             <div class="logo">
                <img src="assets/logo.png" alt="WeHealthify">
                
             </div>
             <i class="bx bx-menu" id="btn"></i>
        </div>
    
        <ul>
            <hr class="spacer">  
            <li>
                <a href="/userDetails">
                    <i class='bx bx-bar-chart-alt-2'></i>
                    <span class="nav-item">My Charts</span>
                </a>
                <span class="tooltip">My Charts</span>
            </li>
           
            <!-- <li>
                <a href="/survey-details/<%= user.Mr_no %>">
                    <i class='bx bx-list-check'></i>
                    <span class="nav-item">My Responses</span>
                </a>
                <span class="tooltip">My Responses</span>
            </li> -->

            <li>
                <a href="/edit-details?Mr_no=<%= user.Mr_no %>">
                    <i class='bx bx-user-circle'></i>
                    <span class="nav-item">My Profile</span>
                </a>
                <span class="tooltip">My Profile</span>
            </li>
<!-- 
            <li>
                <a href="javascript:void(0);" onclick="openServer()">
                    <i class='bx bx-cloud-download'></i>
                    <span class="nav-item">API test</span>
                </a>
                <span class="tooltip">API test</span>
            </li> -->
            <li>
                <form id="logout-form" action="/logout" method="POST" style="display: none;"></form>
                <a href="javascript:void(0);" onclick="document.getElementById('logout-form').submit();">
                    <i class="bx bx-log-out"></i>
                    <span class="nav-item">Logout</span>
                </a>
                <span class="tooltip">Logout</span>
            </li>            
        </ul>
    </div>


  <div class="main-content">
    <div class="topbar">
        <!-- <h1>MR No: <%= user.Mr_no %></h1> -->
         <h1>Welcome to your Health Status Dashboard, <%=user.firstName %> <%=user.lastName %></h1>
        <!-- Add this in the top right corner of the userDetails page -->
    <!-- <div class="ai-icon-container" style="position: absolute; top: 20px; right: 20px;">
        <button id="ai-prompt-btn" style="background-color: transparent; border: none; cursor: pointer;">
            <i class="bx bx-brain bx-lg"></i>
        </button>

    </div> -->
    <div class="language-switch">
        <button id="language-switch-btn">Switch to Arabic</button>
    </div>
    </div>



        
<div class="user-details-container">
    <div class="speciality-container">
        <h2 class="speciality-title">
            <br>
            <br>
            <%= aiMessage %></h2>
            <br>
                <!-- AI Message Box -->
                <div class="ai-message-container">
                    <div class="ai-message-box" id="aiMessageBox">
                        <h3>Summary</h3>
                        <!-- <p id="aiMessageContent"><%= aiMessage %></p> -->
                        <br>
                    </div>
                </div>                
        
        <div id="charts-container" class="charts-grid">
            <!-- Each chart will be appended here by D3 -->
        </div>
    </div>
    <!-- <button onclick="downloadCSV('<%= user.Mr_no %>')">Download CSV</button> -->
</div>





</div>

<!-- The Modal -->
<div id="myModal" class="modal">
    <span class="close" onclick="closeModal()">&times;</span>
    <div class="modal-content">
        <img id="modalImage" src="" alt="Enlarged Image">
    </div>

</div>
</body>

<script>
    function downloadCSV(mr_no) {
        window.location.href = `/download-csv?mr_no=${mr_no}`;
    }
</script>
<script>
function openModal(imageSrc, type, mr_no) {
    const modal = document.getElementById('myModal');
    const modalImage = document.getElementById('modalImage');
    modalImage.src = imageSrc;
    modal.style.display = 'block';

    const iframe = document.getElementById(`iframe-${type}`);
    iframe.src = `/chart?type=${type}&mr_no=${mr_no}`;
}
function openServer() {
    const mr_no = "<%= user.Mr_no %>";
    window.open(`http://localhost:3055/openServer?mr_no=${mr_no}`, '_blank');
}
function closeModal() {
    const modal = document.getElementById('myModal');
    modal.style.display = 'none';
}

window.onclick = function(event) {
    const modal = document.getElementById('myModal');
    if (event.target == modal) {
        modal.style.display = 'none';
    }
}

function openServer() {
    const mr_no = "<%= user.Mr_no %>";
    window.open(`http://localhost:8080?mr_no=${mr_no}`, '_blank');
}

window.addEventListener('load', function() {
    const iframes = document.querySelectorAll('.chart-iframe');
    iframes.forEach(iframe => {
        iframe.onload = () => resizeIframe(iframe);
    });
});


</script>



<script>
    // function loadData(csvPath, callback) {
    //     d3.csv(csvPath).then(data => {
    //         console.log("Data loaded:", data); // Debugging line
    //         data.forEach(d => {
    //             d.months = +d.months_since_baseline;
    //             d.score = +d.score;
    //             d.ymax = +d.ymax;
    //             d.ymin = +d.ymin;
    //         });
    //         callback(data);
    //     }).catch(error => console.error("Error loading data:", error)); // Error handling
    // }

    // function loadSeverityLevels(csvPath, scale, callback) {
    //     d3.csv(csvPath).then(data => {
    //         const severityLevels = data
    //             .filter(d => d.Scale === scale)
    //             .map(d => ({
    //                 level: d.Severity,
    //                 color: d.Color,
    //                 range: [+d.Chart_Range_Min, +d.Chart_Range_Max]
    //             }));
    //         console.log("Severity levels loaded:", severityLevels); // Debugging line
    //         callback(severityLevels);
    //     }).catch(error => console.error("Error loading severity levels:", error)); // Error handling
    // }
    function loadData(csvPath, callback) {
        d3.csv(csvPath).then(data => {
            console.log("Data loaded:", data); // Debugging line
            data.forEach(d => {
                d.months = +d.months_since_baseline;
                d.score = +d.score;
                d.ymax = +d.ymax;
                d.ymin = +d.ymin;
            });
            callback(data);
        }).catch(error => console.error("Error loading data:", error)); // Error handling
    }

    function loadSeverityLevels(csvPath, scale, callback) {
        d3.csv(csvPath).then(data => {
            const severityLevels = data
                .filter(d => d.Scale === scale)
                .map(d => ({
                    level: d.Severity,
                    color: d.Color,
                    range: [+d.Chart_Range_Min, +d.Chart_Range_Max]
                }));
            console.log("Severity levels loaded:", severityLevels); // Debugging line
            callback(severityLevels);
        }).catch(error => console.error("Error loading severity levels:", error)); // Error handling
    }

    function createScales(data, width, height) {
        // const x = d3.scaleLinear()
        //     .domain([d3.min(data, d => d.months), d3.max(data, d => d.months)])
        //     .range([0, width]);
    //     const x = d3.scaleLinear()
    // .domain([0, d3.max(data, d => d.months)])
    // .range([0, width]);
    const x = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.months)])
    .range([0, width * 0.8]); // Compress the space between 0 and 1 (0.8 is an example, you can tweak this)



        const y = d3.scaleLinear()
            .domain([+data[0].ymin, +data[0].ymax])
            .range([height, 0]);

        return { x, y };
    }

    // function drawAxes(svg, x, y, width, height) {
    //     svg.append("g")
    //         .attr("transform", `translate(0,${height})`)
    //         .call(d3.axisBottom(x))
    //         .selectAll("text")
    //         .style("fill", "#777");

    //     svg.append("g")
    //         .call(d3.axisLeft(y))
    //         .selectAll("text")
    //         .style("fill", "#777");
    // }

    // Modify the drawAxes function to only show integer values on the x-axis
function drawAxes(svg, x, y, width, height) {
    // svg.append("g")
    //     .attr("transform", `translate(0,${height})`)
    //     .call(d3.axisBottom(x)
    //         .tickFormat(d => Number.isInteger(d) ? d : "")) // Only display integer tick values
    //     .selectAll("text")
    //     .style("fill", "#777");
    svg.append("g")
    .attr("transform", `translate(0,${height})`)
    .call(d3.axisBottom(x)
        .tickFormat(d => Number.isInteger(d) ? d : "") // Only display integer tick values
        .ticks(3) // Keep the same number of ticks but compress the 0-1 space
    )
    .selectAll("text")
    .style("fill", "#777");


    svg.append("g")
        .call(d3.axisLeft(y))
        .selectAll("text")
        .style("fill", "#777");
}


    function drawSeverityGridLines(svg, y, width, severityLevels) {
        severityLevels.forEach(severity => {
            svg.append("line")
                .attr("class", "grid-line")
                .attr("x1", 0)
                .attr("x2", width)
                .attr("y1", y(severity.range[0]))
                .attr("y2", y(severity.range[0]));

            svg.append("line")
                .attr("class", "grid-line")
                .attr("x1", 0)
                .attr("x2", width)
                .attr("y1", y(severity.range[1]))
                .attr("y2", y(severity.range[1]));
        });
    }

    // function drawSeverityLabels(svg, y, width, margin, severityLevels) {
    //     severityLevels.forEach(severity => {
    //         svg.append("rect")
    //             .attr("x", width + margin.right - 100)
    //             .attr("y", y(severity.range[1]))
    //             .attr("width", 6)
    //             .attr("height", y(severity.range[0]) - y(severity.range[1]))
    //             .attr("fill", severity.color);

    //         svg.append("text")
    //             .attr("x", width + margin.right - 85)
    //             .attr("y", (y(severity.range[0]) + y(severity.range[1])) / 2)
    //             .attr("dy", ".35em")
    //             .attr("text-anchor", "start")
    //             .attr("class", "axis-label")
    //             .text(severity.level);
    //     });
    // }
    function drawSeverityLabels(svg, y, width, margin, severityLevels) {
    severityLevels.forEach(severity => {
        svg.append("rect")
            .attr("x", width + margin.right - 100)
            .attr("y", y(severity.range[1]))
            .attr("width", 6)
            .attr("height", y(severity.range[0]) - y(severity.range[1]))
            .attr("fill", severity.color);

        svg.append("text")
            .attr("x", width + margin.right - 85)
            .attr("y", (y(severity.range[0]) + y(severity.range[1])) / 2)
            .attr("dy", ".35em")
            .attr("text-anchor", "start")
            .attr("class", "axis-label")
            .text(severity.level);
    });
}

    const scoreInterpretation = {
        "PROMIS-10 Physical": "higher",
        "PROMIS-10 Mental": "higher",
        "WEXNER": "lower",
        "ICIQ-UI SF": "lower",
        "PAID": "lower",
        "EPDS": "lower",
        "PROMIS Bank v1.1 - Pain Interference": "lower",
        "PROMIS SF v1.0 - Fatigue-OA-Knee 8a" :"lower",
        "PROMIS SF v1.0 - Depression-OA-Knee 4a" :"lower"
    };

    // function drawLineAndPoints(svg, data, x, y, line, severityLevels) {
    //     const tooltip = d3.select("body").append("div")
    //         .attr("class", "tooltip")
    //         .style("opacity", 0);

    //     svg.append("path")
    //         .datum(data)
    //         .attr("class", "line")
    //         .attr("d", line);

    //     // Function to format the date
    //     function formatDate(dateStr) {
    //         const date = new Date(dateStr);
    //         const day = String(date.getDate()).padStart(2, '0');
    //         const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
    //         const year = date.getFullYear();
    //         return `${month}/${day}/${year}`;
    //     }

    //     data.forEach(d => {
    //         const circle = svg.append("circle")
    //             .attr("class", "data-circle")
    //             .attr("cx", x(d.months))
    //             .attr("cy", y(d.score))
    //             .attr("r", 4);

    //         // Determine the severity color
    //         let severityColor = "lightsteelblue";
    //         severityLevels.forEach(severity => {
    //             if (d.score >= severity.range[0] && d.score <= severity.range[1]) {
    //                 severityColor = severity.color;
    //             }
    //         });

    //         // Add hover functionality
    //         circle.on("mouseover", (event) => {
    //             tooltip.transition().duration(200).style("opacity", .9);
    //             tooltip.html(`<strong>Date:</strong> ${formatDate(d.date)}<br><strong>Score:</strong> ${d.score}`)
    //                 .style("left", (event.pageX + 15) + "px")
    //                 .style("top", (event.pageY - 28) + "px")
    //                 .style("background", severityColor);
    //         }).on("mouseout", () => {
    //             tooltip.transition().duration(500).style("opacity", 0);
    //         });
    //     });

    //     const lastDataPoint = data[data.length - 1];

    //     svg.append("circle")
    //         .attr("class", "highlight-circle")
    //         .attr("cx", x(lastDataPoint.months))
    //         .attr("cy", y(lastDataPoint.score))
    //         .attr("r", 8)
    //         .attr("fill", severityLevels.find(severity => lastDataPoint.score >= severity.range[0] && lastDataPoint.score <= severity.range[1]).color);

    //     svg.append("text")
    //         .attr("class", "annotation")
    //         .attr("x", x(lastDataPoint.months) + 10)
    //         .attr("y", y(lastDataPoint.score))
    //         .text(lastDataPoint.score);
    // }
//     function drawLineAndPoints(svg, data, x, y, line, severityLevels) {
//     const tooltip = d3.select("body").append("div")
//         .attr("class", "tooltip")
//         .style("opacity", 0);

//     svg.append("path")
//         .datum(data)
//         .attr("class", "line")
//         .attr("d", line);

//     // Function to format the date
//     function formatDate(dateStr) {
//         const date = new Date(dateStr);
//         const day = String(date.getDate()).padStart(2, '0');
//         const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
//         const year = date.getFullYear();
//         return `${month}/${day}/${year}`;
//     }

//     data.forEach((d, i) => {
//         const circle = svg.append("circle")
//             .attr("class", i === data.length - 1 ? "highlight-circle" : "data-circle")
//             .attr("cx", x(d.months))
//             .attr("cy", y(d.score))
//             .attr("r", i === data.length - 1 ? 8 : 4)
//             .attr("fill", i === data.length - 1 ? severityLevels.find(severity => d.score >= severity.range[0] && d.score <= severity.range[1]).color : null)
//             .on("mouseover", (event) => {
//                 tooltip.transition().duration(200).style("opacity", .9);

//                 // Determine the severity color
//                 let severityColor = "lightsteelblue"; // Default color
//                 severityLevels.forEach(severity => {
//                     if (d.score >= severity.range[0] && d.score <= severity.range[1]) {
//                         severityColor = severity.color;
//                     }
//                 });

//                 tooltip.html(i === data.length - 1 ? `<strong>Date:</strong> ${formatDate(d.date)}` : `<strong>Date:</strong> ${formatDate(d.date)}<br><strong>Score:</strong> ${d.score}`)
//                     .style("left", (event.pageX + 15) + "px")
//                     .style("top", (event.pageY - 28) + "px")
//                     .style("background-color", severityColor); // Set the dynamic background color
//             }).on("mouseout", () => {
//                 tooltip.transition().duration(500).style("opacity", 0);
//             });
//     });

//     svg.append("text")
//         .attr("class", "annotation")
//         .attr("x", x(data[data.length - 1].months) + 10)
//         .attr("y", y(data[data.length - 1].score))
//         .text(data[data.length - 1].score);
// }

function drawLineAndPoints(svg, data, x, y, line, severityLevels) {
    const tooltip = d3.select("body").append("div")
        .attr("class", "tooltip")
        .style("opacity", 0);

    svg.append("path")
        .datum(data)
        .attr("class", "line")
        .attr("d", line);

    // Function to format the date as "13th July"
    function formatDate(dateStr) {
        const date = new Date(dateStr);
        const day = date.getDate();
        const month = date.toLocaleString('default', { month: 'long' }); // Full month name
        const suffix = getOrdinalSuffix(day);
        return `${day}${suffix} ${month}`;
    }

    // Function to determine the ordinal suffix for a given day
    function getOrdinalSuffix(day) {
        if (day > 3 && day < 21) return 'th'; // Handles 11th, 12th, 13th, etc.
        switch (day % 10) {
            case 1: return "st";
            case 2: return "nd";
            case 3: return "rd";
            default: return "th";
        }
    }

    data.forEach((d, i) => {
        const circle = svg.append("circle")
            .attr("class", i === data.length - 1 ? "highlight-circle" : "data-circle")
            .attr("cx", x(d.months))
            .attr("cy", y(d.score))
            .attr("r", i === data.length - 1 ? 8 : 4)
            .attr("fill", i === data.length - 1 ? severityLevels.find(severity => d.score >= severity.range[0] && d.score <= severity.range[1]).color : null)
            .on("mouseover", (event) => {
                tooltip.transition().duration(200).style("opacity", .9);

                // Determine the severity color
                let severityColor = "lightsteelblue"; // Default color
                severityLevels.forEach(severity => {
                    if (d.score >= severity.range[0] && d.score <= severity.range[1]) {
                        severityColor = severity.color;
                    }
                });

                tooltip.html(i === data.length - 1 ? `<strong>Date:</strong> ${formatDate(d.date)}` : `<strong>Date:</strong> ${formatDate(d.date)}<br><strong>Score:</strong> ${d.score}`)
                    .style("left", (event.pageX + 15) + "px")
                    .style("top", (event.pageY - 28) + "px")
                    .style("background-color", severityColor); // Set the dynamic background color
            }).on("mouseout", () => {
                tooltip.transition().duration(500).style("opacity", 0);
            });
    });

    svg.append("text")
        .attr("class", "annotation")
        .attr("x", x(data[data.length - 1].months) + 10)
        .attr("y", y(data[data.length - 1].score))
        .text(data[data.length - 1].score);
}


    function drawAnnotations(svg, data, margin, width, height, traceName) {
        const scoreType = scoreInterpretation[traceName];
        const changeFromFirstVisit = Math.round((data[data.length - 1].score - data[0].score) * 100) / 100;
        const changeFromLastVisit = Math.round((data[data.length - 1].score - data[data.length - 2].score) * 100) / 100;

        const getAnnotationText = (change, type, isFirstVisit) => {
            if (type === "higher") {
                return change > 0 ? `↑ ${change} from ${isFirstVisit ? "first" : "last"} visit` : `↓ ${Math.abs(change)} from ${isFirstVisit ? "first" : "last"} visit`;
            } else {
                return change < 0 ? `↑ ${Math.abs(change)} from ${isFirstVisit ? "first" : "last"} visit` : `↓ ${change} from ${isFirstVisit ? "first" : "last"} visit`;
            }
        };

        const getColor = (change, type) => {
            if (type === "higher") {
                return change > 0 ? "green" : "red";
            } else {
                return change < 0 ? "green" : "red";
            }
        };

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", margin.left / 2)
            .attr("y", -margin.top / 2.5)
            .text(getAnnotationText(changeFromFirstVisit, scoreType, true))
            .style("fill", getColor(changeFromFirstVisit, scoreType));

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", margin.left / 2)
            .attr("y", -margin.top / 2 + 25)
            .text(getAnnotationText(changeFromLastVisit, scoreType, false))
            .style("fill", getColor(changeFromLastVisit, scoreType));
    }

    function drawTitleAndLabels(svg, title, margin, width, height) {
        const xAxisLabel = "Months Since Baseline";

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", width / 2)
            .attr("y", height + margin.bottom - 10)
            .attr("text-anchor", "middle")
            .text(xAxisLabel);

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", width / 2)
            .attr("y", -margin.top + 30)
            .attr("text-anchor", "middle")
            .style("font-size", "18px")
            .text(title);
    }
//     function drawVerticalEventLines(svg, data, x, y, height) {
//     // Define a tooltip for event details
//     const eventTooltip = d3.select("body").append("div")
//         .attr("class", "tooltip")
//         .style("opacity", 0);

//     data.forEach(d => {
//         // Only draw a line if there's an event
//         if (d.event_date && d.event) {
//             const eventX = x(d.months); // Use the 'months' field for X coordinate

//             // Draw the vertical line
//             svg.append("line")
//                 .attr("class", "event-line")
//                 .attr("x1", eventX)
//                 .attr("x2", eventX)
//                 .attr("y1", y(y.domain()[0])) // y-axis minimum
//                 .attr("y2", y(y.domain()[1])) // y-axis maximum
//                 .style("stroke", "#FF4500") // Customize the line color
//                 .style("stroke-width", 1)
//                 .style("stroke-dasharray", "4,4") // Dashed line style
//                 .on("mouseover", function (event) {
//                     eventTooltip.transition().duration(200).style("opacity", .9);
//                     eventTooltip.html(`<strong>Event:</strong> ${d.event}<br><strong>Date:</strong> ${d.event_date}`)
//                         .style("left", (event.pageX + 15) + "px")
//                         .style("top", (event.pageY - 28) + "px");
//                 })
//                 .on("mouseout", function () {
//                     eventTooltip.transition().duration(500).style("opacity", 0);
//                 });
//         }
//     });
// }

// function drawChart(data, severityCsvPath, traceName, title) {
//     const margin = { top: 80, right: 150, bottom: 50, left: 50 };
//     const width = 600 - margin.left - margin.right;
//     const height = 400 - margin.top - margin.bottom;

//     const chartContainer = d3.select("#charts-container")
//         .append("div")
//         .attr("class", "chart-container");

//     const svg = chartContainer.append("svg")
//         .attr("width", width + margin.left + margin.right)
//         .attr("height", height + margin.top + margin.bottom)
//         .append("g")
//         .attr("transform", `translate(${margin.left},${margin.top})`);

//     const filteredData = data.filter(d => d.trace_name === traceName);
//     loadSeverityLevels(severityCsvPath, traceName, severityLevels => {
//         const { x, y } = createScales(filteredData, width, height);
//         const line = d3.line()
//             .x(d => x(d.months))
//             .y(d => y(d.score))
//             .curve(d3.curveCardinal);

//         drawAxes(svg, x, y, width, height);
//         drawSeverityGridLines(svg, y, width, severityLevels);
//         drawSeverityLabels(svg, y, width, margin, severityLevels);
//         drawVerticalEventLines(svg, filteredData, x, y, height); // Draw event lines

//         // Always draw title and labels
//         drawTitleAndLabels(svg, title, margin, width, height);

//         if (filteredData.length > 0) {
//             drawLineAndPoints(svg, filteredData, x, y, line, severityLevels);
//             drawAnnotations(svg, filteredData, margin, width, height, traceName);
//         }
//     });
// }

// function drawVerticalEventLines(svg, data, x, y, height) {
//     // Define a tooltip for event details
//     const eventTooltip = d3.select("body").append("div")
//         .attr("class", "tooltip")
//         .style("opacity", 0);

//     data.forEach(d => {
//         // Only draw a line if there's an event
//         if (d.event_date && d.event) {
//             const eventX = x(d.months); // Use the 'months' field for X coordinate

//             // Draw the vertical line
//             svg.append("line")
//                 .attr("class", "event-line")
//                 .attr("x1", eventX)
//                 .attr("x2", eventX)
//                 .attr("y1", y(y.domain()[0])) // y-axis minimum
//                 .attr("y2", y(y.domain()[1])) // y-axis maximum
//                 .style("stroke", "#FF4500") // Customize the line color
//                 .style("stroke-width", 1)
//                 //.style("stroke-dasharray", "4,4") // Dashed line style (commented out)
//                 .on("mouseover", function (event) {
//                     eventTooltip.transition().duration(200).style("opacity", .9);
//                     eventTooltip.html(`<strong>Event:</strong> ${d.event}<br><strong>Date:</strong> ${d.event_date}`)
//                         .style("left", (event.pageX + 15) + "px")
//                         .style("top", (event.pageY - 28) + "px");
//                 })
//                 .on("mouseout", function () {
//                     eventTooltip.transition().duration(500).style("opacity", 0);
//                 });
//         }
//     });
// }

// function drawChart(data, severityCsvPath, traceName, title) {
//     const margin = { top: 80, right: 150, bottom: 50, left: 50 };
//     const width = 600 - margin.left - margin.right;
//     const height = 400 - margin.top - margin.bottom;

//     const chartContainer = d3.select("#charts-container")
//         .append("div")
//         .attr("class", "chart-container");

//     const svg = chartContainer.append("svg")
//         .attr("width", width + margin.left + margin.right)
//         .attr("height", height + margin.top + margin.bottom)
//         .append("g")
//         .attr("transform", `translate(${margin.left},${margin.top})`);

//     const filteredData = data.filter(d => d.trace_name === traceName);
//     loadSeverityLevels(severityCsvPath, traceName, severityLevels => {
//         const { x, y } = createScales(filteredData, width, height);
//         const line = d3.line()
//             .x(d => x(d.months))
//             .y(d => y(d.score))
//             .curve(d3.curveCardinal);

//         drawAxes(svg, x, y, width, height);
//         drawSeverityGridLines(svg, y, width, severityLevels);
//         drawSeverityLabels(svg, y, width, margin, severityLevels);
//         drawVerticalEventLines(svg, filteredData, x, y, height); // Draw event lines

//         // Always draw title and labels
//         drawTitleAndLabels(svg, title, margin, width, height);

//         if (filteredData.length > 0) {
//             drawLineAndPoints(svg, filteredData, x, y, line, severityLevels);
//             drawAnnotations(svg, filteredData, margin, width, height, traceName);
//         }
//     });
// }

// function drawVerticalEventLines(svg, data, x, y, height) {
//     // Define a tooltip for event details
//     const eventTooltip = d3.select("body").append("div")
//         .attr("class", "tooltip")
//         .style("opacity", 0);

//     data.forEach(d => {
//         if (d.event_date && d.event) {
//             const eventDate = new Date(d.event_date);
//             const dataDate = new Date(d.date);
            
//             // Compare the months of date and event_date
//             if (eventDate.getMonth() === dataDate.getMonth()) {
//                 const eventX = x(d.months); // Use the 'months' field for X coordinate

//                 // Draw the vertical line
//                 svg.append("line")
//                     .attr("class", "event-line")
//                     .attr("x1", eventX)
//                     .attr("x2", eventX)
//                     .attr("y1", y(y.domain()[0])) // y-axis minimum
//                     .attr("y2", y(y.domain()[1])) // y-axis maximum
//                     .style("stroke", "#FF4500") // Customize the line color
//                     .style("stroke-width", 3)
//                     .style("stroke-dasharray", "4,4") // Dashed line style (commented out)
//                     .on("mouseover", function (event) {
//                         eventTooltip.transition().duration(200).style("opacity", .9);
//                         eventTooltip.html(`<strong>Event:</strong> ${d.event}<br><strong>Date:</strong> ${d.event_date}`)
//                             .style("left", (event.pageX + 15) + "px")
//                             .style("top", (event.pageY - 28) + "px");
//                     })
//                     .on("mouseout", function () {
//                         eventTooltip.transition().duration(500).style("opacity", 0);
//                     });
//             }
//         }
//     });
// }
function drawVerticalEventLines(svg, data, x, y, height) {
    // Define a tooltip for event details
    const eventTooltip = d3.select("body").append("div")
        .attr("class", "tooltip")
        .style("opacity", 0);

    data.forEach(d => {
        if (d.event_date && d.event) {
            const eventDate = new Date(d.event_date);
            const dataDate = new Date(d.date);
            
            // Compare the months of date and event_date
            if (eventDate.getMonth() === dataDate.getMonth()) {
                const eventX = x(d.months); // Use the 'months' field for X coordinate

                // Draw the vertical line with increased hit area
                svg.append("line")
                    .attr("class", "event-line")
                    .attr("x1", eventX)
                    .attr("x2", eventX)
                    .attr("y1", y(y.domain()[0])) // y-axis minimum
                    .attr("y2", y(y.domain()[1])) // y-axis maximum
                    .style("stroke", "#FF4500") // Customize the line color
                    .style("stroke-width", 10) // Increase the width for better hit area
                    .style("stroke-opacity", 0) // Make the larger hit area invisible
                    .style("pointer-events", "stroke") // Enable pointer events only on the stroke
                    .on("mouseover", function (event) {
                        eventTooltip.transition().duration(200).style("opacity", .9);
                        eventTooltip.html(`<strong>Event:</strong> ${d.event}<br><strong>Date:</strong> ${d.event_date}`)
                            .style("left", (event.pageX + 15) + "px")
                            .style("top", (event.pageY - 28) + "px");
                    })
                    .on("mouseout", function () {
                        eventTooltip.transition().duration(500).style("opacity", 0);
                    });

                // Draw the visible line
                svg.append("line")
                    .attr("class", "event-line-visible")
                    .attr("x1", eventX)
                    .attr("x2", eventX)
                    .attr("y1", y(y.domain()[0])) // y-axis minimum
                    .attr("y2", y(y.domain()[1])) // y-axis maximum
                    .style("stroke", "#FF4500") // Customize the line color
                    .style("stroke-width", 3)
                    .style("stroke-dasharray", "4,4"); // Dashed line style
            }
        }
    });
}


function drawChart(data, severityCsvPath, traceName, title) {
    const margin = { top: 80, right: 150, bottom: 50, left: 50 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const chartContainer = d3.select("#charts-container")
        .append("div")
        .attr("class", "chart-container");

    const svg = chartContainer.append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

    const filteredData = data.filter(d => d.trace_name === traceName);
    loadSeverityLevels(severityCsvPath, traceName, severityLevels => {
        const { x, y } = createScales(filteredData, width, height);
        const line = d3.line()
            .x(d => x(d.months))
            .y(d => y(d.score))
            .curve(d3.curveCardinal);

        drawAxes(svg, x, y, width, height);
        drawSeverityGridLines(svg, y, width, severityLevels);
        drawSeverityLabels(svg, y, width, margin, severityLevels);
        drawVerticalEventLines(svg, filteredData, x, y, height); // Draw event lines

        // Always draw title and labels
        drawTitleAndLabels(svg, title, margin, width, height);

        if (filteredData.length > 0) {
            drawLineAndPoints(svg, filteredData, x, y, line, severityLevels);
            drawAnnotations(svg, filteredData, margin, width, height, traceName);
        }
    });
}

    // // function drawChart(data, severityCsvPath, traceName, title) {
    // //     const margin = { top: 80, right: 150, bottom: 50, left: 50 };
    // //     const width = 600 - margin.left - margin.right;
    // //     const height = 400 - margin.top - margin.bottom;

    // //     const chartContainer = d3.select("#charts-container")
    // //         .append("div")
    // //         .attr("class", "chart-container");

    // //     const svg = chartContainer.append("svg")
    // //         .attr("width", width + margin.left + margin.right)
    // //         .attr("height", height + margin.top + margin.bottom)
    // //         .append("g")
    // //         .attr("transform", `translate(${margin.left},${margin.top})`);

    // //     const filteredData = data.filter(d => d.trace_name === traceName);
    // //     loadSeverityLevels(severityCsvPath, traceName, severityLevels => {
    // //         const { x, y } = createScales(filteredData, width, height);
    // //         const line = d3.line()
    // //             .x(d => x(d.months))
    // //             .y(d => y(d.score))
    // //             .curve(d3.curveCardinal);

    // //         drawAxes(svg, x, y, width, height);
    // //         drawSeverityGridLines(svg, y, width, severityLevels);
    // //         drawSeverityLabels(svg, y, width, margin, severityLevels);

    // //         // Always draw title and labels
    // //         drawTitleAndLabels(svg, title, margin, width, height);

    // //         if (filteredData.length > 0) {
    // //             drawLineAndPoints(svg, filteredData, x, y, line, severityLevels);
    // //             drawAnnotations(svg, filteredData, margin, width, height, traceName);
    // //         }
    // //     });
    // // }
    function switchLanguage() {
    const urlParams = new URLSearchParams(window.location.search);
    const currentLang = urlParams.get('lang') || 'en';
    const newLang = currentLang === 'en' ? 'ar' : 'en';

    // Update the URL with the new language
    urlParams.set('lang', newLang);
    const newUrl = `/userDetails?${urlParams.toString()}`;
    window.location.href = newUrl;
}

// Update button text on page load based on the current language
document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const currentLang = urlParams.get('lang') || 'en';
    const languageSwitchBtn = document.getElementById('language-switch-btn');
    
    if (currentLang === 'en') {
        languageSwitchBtn.textContent = 'Switch to Arabic';
    } else {
        languageSwitchBtn.textContent = 'Switch to English';
    }

    // Attach event listener to the button
    languageSwitchBtn.addEventListener('click', switchLanguage);
});


        // Determine language
    const urlParams = new URLSearchParams(window.location.search);
    const lang = urlParams.get('lang') || 'en';

    // Set the correct path for the CSV files
    const severityCsvPath = lang === 'ar' ? 'SeverityLevels_ar.csv' : 'SeverityLevels.csv';

    // Load data and draw charts for patient_health_scores CSV
    loadData("<%= csvPath %>", data => {
        console.log("Unique trace names:", [...new Set(data.map(d => d.trace_name))]); // Debugging line
        const uniqueTraceNames = [...new Set(data.map(d => d.trace_name))];
        uniqueTraceNames.forEach(traceName => {
            const title = data.find(d => d.trace_name === traceName).title || traceName;
            drawChart(data, severityCsvPath, traceName, title);
        });
    });

    // Load data and draw charts for pain interference CSV
    loadData("<%= painCsvPath %>", data => {
        console.log("Unique trace names:", [...new Set(data.map(d => d.trace_name))]); // Debugging line
        const uniqueTraceNames = [...new Set(data.map(d => d.trace_name))];
        uniqueTraceNames.forEach(traceName => {
            const title = data.find(d => d.trace_name === traceName).title || traceName;
            drawChart(data, severityCsvPath, traceName, title);
        });
    });
</script>


<script>
    let btn = document.querySelector('#btn');
    let sidebar = document.querySelector('.sidebar');
  
    btn.onclick = function() {
        sidebar.classList.toggle('active');
    };
  </script>
  
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    const sidebarLinks = document.querySelectorAll('.sidebar ul li a');
  
    function removeCurrentPageClasses() {
        sidebarLinks.forEach(link => {
            link.classList.remove('CurrentPage');
        });
    }
  
    function setCurrentPageLink(path) {
        removeCurrentPageClasses();
        console.log(`Setting CurrentPage link for path: ${path}`);
        const currentPageLink = Array.from(sidebarLinks).find(link => {
            const linkPath = new URL(link.href).pathname;
            return linkPath === path;
        });
        if (currentPageLink) {
            console.log(`CurrentPage link found: ${currentPageLink.href}`);
            currentPageLink.classList.add('CurrentPage');
        } else {
            console.log(`No CurrentPage link found for path: ${path}`);
        }
    }
  
    // Check the URL path and set the current page link on page load
    const currentPath = window.location.pathname;
    console.log(`Current path: ${currentPath}`);
    setCurrentPageLink(currentPath);
  
    sidebarLinks.forEach(link => {
        link.addEventListener('click', function() {
            const targetPath = new URL(link.href).pathname;
            console.log(`Navigating to: ${targetPath}`);
            setCurrentPageLink(targetPath);
        });
    });
  });
  </script>


<!--This the Open Ai prompt Script call-->

<!-- <script>
    document.getElementById('ai-prompt-btn').addEventListener('click', function () {
        // Get the MR number from the user details
        const mrNo = "<%= user.Mr_no %>";

        // Send an AJAX request to the server to get the AI message
        fetch(`/get-ai-message?mr_no=${mrNo}`)
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    // Show the AI message in the modal
                    document.getElementById('aiMessageContent').innerText = data.message;
                    document.getElementById('aiPromptModal').style.display = 'block';
                } else {
                    alert('Failed to get AI message.');
                }
            })
            .catch(error => {
                console.error('Error fetching AI message:', error);
                alert('An error occurred while fetching the AI message.');
            });
    });

    // Close the AI modal when clicking on the close button
    document.getElementById('closeAiModal').addEventListener('click', function () {
        document.getElementById('aiPromptModal').style.display = 'none';
    });

    // Close the AI modal when clicking outside the modal content
    window.onclick = function (event) {
        const modal = document.getElementById('aiPromptModal');
        if (event.target == modal) {
            modal.style.display = 'none';
        }
    };
</script> -->

<!-- <script>
    document.getElementById('ai-prompt-btn').addEventListener('click', function () {
    // Get the MR number from the user details
    const mrNo = "<%= user.Mr_no %>";

    // Send an AJAX request to the server to get the AI message
    fetch(`/get-ai-message?mr_no=${mrNo}`)
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                // Show the AI message in the box
                document.getElementById('aiMessageContent').innerText = data.message;
                document.getElementById('aiMessageBox').style.display = 'block';
            } else {
                alert('Failed to get AI message.');
            }
        })
        .catch(error => {
            console.error('Error fetching AI message:', error);
            alert('An error occurred while fetching the AI message.');
        });
});
</script> -->



</html>
