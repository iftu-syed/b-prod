<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title><%= title %></title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
            font-family: Verdana, sans-serif;
        }
        .line {
            fill: none;
            stroke: #8a8a8a;
            stroke-width: 2.5px;
        }
        .axis-label {
            font-size: 11px;
            font-family: Verdana, sans-serif;
        }
        .annotation {
            font-size: 14px;
            font-family: Verdana, sans-serif;
        }
        .highlight-circle {
            stroke: #4682b4;
            stroke-width: 2.5px;
        }
        .data-circle {
            fill: #ffffff;
            stroke:  #8a8a8a;
            stroke-width: 2.5px;
        }
        .grid-line {
            stroke: #ddd;
            stroke-width: 1px;
        }
    </style>
</head>
<body>

<svg width="600" height="400"></svg>

<script>
    d3.csv("<%= csvPath %>").then(data => {
        data.forEach(d => {
            d.months = +d.months_since_initial;
            d.score = +d.scores;
            d.ymax = +d.ymax;
            d.ymin = +d.ymin;
        });

        const ymin = +data[0].ymin;
        const ymax = +data[0].ymax;

        const margin = { top: 50, right: 120, bottom: 50, left: 50 };
        const width = 600 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svg = d3.select("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear()
            .domain([d3.min(data, d => d.months), d3.max(data, d => d.months)])
            .range([0, width]);

        const y = d3.scaleLinear()
            .domain([ymin, ymax])
            .range([height, 0]);

        const line = d3.line()
            .x(d => x(d.months))
            .y(d => y(d.score))
            .curve(d3.curveCardinal);

        const severityLevels = [
            { level: 'Excellent', color: '#00ff00', range: [65, 75] },
            { level: 'Very Good', color: '#7fff00', range: [55, 65] },
            { level: 'Good', color: '#ffff00', range: [40, 55] },
            { level: 'Fair', color: '#ff7f00', range: [25, 40] },
            { level: 'Poor', color: '#ff0000', range: [15, 25] }
        ];

        severityLevels.forEach(severity => {
            svg.append("line")
                .attr("class", "grid-line")
                .attr("x1", 0)
                .attr("x2", width)
                .attr("y1", y(severity.range[0]))
                .attr("y2", y(severity.range[0]));

            svg.append("line")
                .attr("class", "grid-line")
                .attr("x1", 0)
                .attr("x2", width)
                .attr("y1", y(severity.range[1]))
                .attr("y2", y(severity.range[1]));
        });

        svg.append("g")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(x))
            .selectAll("text")
            .style("fill", "#777");

        svg.append("g")
            .call(d3.axisLeft(y))
            .selectAll("text")
            .style("fill", "#777");

        svg.append("path")
            .datum(data)
            .attr("class", "line")
            .attr("d", line);

        data.slice(0, -1).forEach(d => {
            svg.append("circle")
                .attr("class", "data-circle")
                .attr("cx", x(d.months))
                .attr("cy", y(d.score))
                .attr("r", 4);
        });

        const lastDataPoint = data[data.length - 1];
        let highlightColor = "#4682b4";

        severityLevels.forEach(severity => {
            if (lastDataPoint.score >= severity.range[0] && lastDataPoint.score <= severity.range[1]) {
                highlightColor = severity.color;
            }
        });

        svg.append("circle")
            .attr("class", "highlight-circle")
            .attr("cx", x(lastDataPoint.months))
            .attr("cy", y(lastDataPoint.score))
            .attr("r", 8)
            .attr("fill", highlightColor);

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", x(lastDataPoint.months) + 10)
            .attr("y", y(lastDataPoint.score))
            .text(lastDataPoint.score);

        severityLevels.forEach((severity, i) => {
            svg.append("rect")
                .attr("x", width + margin.right - 70)
                .attr("y", y(severity.range[1]))
                .attr("width", 6)
                .attr("height", y(severity.range[0]) - y(severity.range[1]))
                .attr("fill", severity.color);

            svg.append("text")
                .attr("x", width + margin.right - 55)
                .attr("y", (y(severity.range[0]) + y(severity.range[1])) / 2)
                .attr("dy", ".35em")
                .attr("text-anchor", "start")
                .attr("class", "axis-label")
                .text(severity.level);
        });

        const xAxisLabel = data.columns[1];
        const chartTitle = data[0].trace_name;

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", width / 2)
            .attr("y", height + margin.top)
            .attr("text-anchor", "middle")
            .text(xAxisLabel);

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", width / 2)
            .attr("y", -margin.top / 2)
            .attr("text-anchor", "middle")
            .style("font-size", "18px")
            .text(chartTitle);

        const changeSinceBaseline = Math.round((lastDataPoint.score - data[0].score) * 100) / 100;
        const changeSinceLast = Math.round((lastDataPoint.score - data[data.length - 2].score) * 100) / 100;

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", 10)
            .attr("y", 10)
            .text(changeSinceBaseline > 0 ? `↑ ${changeSinceBaseline} since baseline` : `↓ ${changeSinceBaseline} since baseline`)
            .style("fill", changeSinceBaseline > 0 ? "green" : "red");

        svg.append("text")
            .attr("class", "annotation")
            .attr("x", 10)
            .attr("y", 30)
            .text(changeSinceLast < 0 ? `↓ ${changeSinceLast} since last` : `↑ ${changeSinceLast} since last`)
            .style("fill", changeSinceLast < 0 ? "red" : "green");
    });
</script>

</body>
</html>
